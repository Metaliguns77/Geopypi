{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geopypi","text":"<p>This is a python package for batch geoprocessing.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Gopypi is a Python package that allows users to analyze and visualize geospatial data using minimal code within a Jupyter environment, including platforms like Google Colab, Jupyter Notebook, and JupyterLab. It offers several interactive tools that enable users to add vector and raster data to maps without the need for coding</p>"},{"location":"#usage","title":"Usage","text":"<ul> <li> <p>Displaying raster data: Geopypi allows you to load and display raster data, such as GeoTIFFs, on the map. This feature is useful for visualizing satellite imagery, digital elevation models, and other gridded datasets.</p> </li> <li> <p>Vector data display: Geopypi is compatible with multiple vector data formats such as Shapefile, GeoJSON, GeoPackage, and any format supported by GeoPandas. It allows for the loading and displaying of vector data on the map, facilitating the visualization and analysis of spatial features</p> </li> <li> <p>Downloading and visualizing data: Geopypi enables the download and visualization of geospatial data, offering detailed world imagery for diverse analytical purposes</p> </li> <li> <p>Developing interactive web applications: Geopypi facilitates the creation of interactive web apps through the use of frameworks such as Streamlit.</p> </li> <li> <p>Free software: MIT License</p> </li> <li>Documentation: https://Metaliguns77.github.io/geopypi</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geopypi.common.classify","title":"<code>classify(data, column, cmap=None, colors=None, labels=None, scheme='Quantiles', k=5, legend_kwds=None, classification_kwds=None)</code>","text":"<p>Classify a dataframe column using a variety of classification schemes.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | pd.DataFrame | gpd.GeoDataFrame</code> <p>The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.</p> required <code>column</code> <code>str</code> <p>The column to classify.</p> required <code>cmap</code> <code>str</code> <p>The name of a colormap recognized by matplotlib. Defaults to None.</p> <code>None</code> <code>colors</code> <code>list</code> <p>A list of colors to use for the classification. Defaults to None.</p> <code>None</code> <code>labels</code> <code>list</code> <p>A list of labels to use for the legend. Defaults to None.</p> <code>None</code> <code>scheme</code> <code>str</code> <p>Name of a choropleth classification scheme (requires mapclassify). Name of a choropleth classification scheme (requires mapclassify). A mapclassify.MapClassifier object will be used under the hood. Supported are all schemes provided by mapclassify (e.g. 'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled', 'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced', 'JenksCaspallSampled', 'MaxP', 'MaximumBreaks', 'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean', 'UserDefined'). Arguments can be passed in classification_kwds.</p> <code>'Quantiles'</code> <code>k</code> <code>int</code> <p>Number of classes (ignored if scheme is None or if column is categorical). Default to 5.</p> <code>5</code> <code>legend_kwds</code> <code>dict</code> <p>Keyword arguments to pass to :func:<code>matplotlib.pyplot.legend</code> or <code>matplotlib.pyplot.colorbar</code>. Defaults to None. Keyword arguments to pass to :func:<code>matplotlib.pyplot.legend</code> or Additional accepted keywords when <code>scheme</code> is specified: fmt : string     A formatting specification for the bin edges of the classes in the     legend. For example, to have no decimals: <code>{\"fmt\": \"{:.0f}\"}</code>. labels : list-like     A list of legend labels to override the auto-generated labblels.     Needs to have the same number of elements as the number of     classes (<code>k</code>). interval : boolean (default False)     An option to control brackets from mapclassify legend.     If True, open/closed interval brackets are shown in the legend.</p> <code>None</code> <code>classification_kwds</code> <code>dict</code> <p>Keyword arguments to pass to mapclassify. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>pd.DataFrame, dict</code> <p>A pandas dataframe with the classification applied and a legend dictionary.</p> Source code in <code>geopypi/common.py</code> <pre><code>def classify(\n    data,\n    column,\n    cmap=None,\n    colors=None,\n    labels=None,\n    scheme=\"Quantiles\",\n    k=5,\n    legend_kwds=None,\n    classification_kwds=None,\n):\n    \"\"\"Classify a dataframe column using a variety of classification schemes.\n\n    Args:\n        data (str | pd.DataFrame | gpd.GeoDataFrame): The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.\n        column (str): The column to classify.\n        cmap (str, optional): The name of a colormap recognized by matplotlib. Defaults to None.\n        colors (list, optional): A list of colors to use for the classification. Defaults to None.\n        labels (list, optional): A list of labels to use for the legend. Defaults to None.\n        scheme (str, optional): Name of a choropleth classification scheme (requires mapclassify).\n            Name of a choropleth classification scheme (requires mapclassify).\n            A mapclassify.MapClassifier object will be used\n            under the hood. Supported are all schemes provided by mapclassify (e.g.\n            'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled',\n            'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced',\n            'JenksCaspallSampled', 'MaxP', 'MaximumBreaks',\n            'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean',\n            'UserDefined'). Arguments can be passed in classification_kwds.\n        k (int, optional): Number of classes (ignored if scheme is None or if column is categorical). Default to 5.\n        legend_kwds (dict, optional): Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or `matplotlib.pyplot.colorbar`. Defaults to None.\n            Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or\n            Additional accepted keywords when `scheme` is specified:\n            fmt : string\n                A formatting specification for the bin edges of the classes in the\n                legend. For example, to have no decimals: ``{\"fmt\": \"{:.0f}\"}``.\n            labels : list-like\n                A list of legend labels to override the auto-generated labblels.\n                Needs to have the same number of elements as the number of\n                classes (`k`).\n            interval : boolean (default False)\n                An option to control brackets from mapclassify legend.\n                If True, open/closed interval brackets are shown in the legend.\n        classification_kwds (dict, optional): Keyword arguments to pass to mapclassify. Defaults to None.\n\n    Returns:\n        pd.DataFrame, dict: A pandas dataframe with the classification applied and a legend dictionary.\n    \"\"\"\n\n    import numpy as np\n    import pandas as pd\n    import geopandas as gpd\n    import matplotlib as mpl\n    import matplotlib.pyplot as plt\n\n    try:\n        import mapclassify\n    except ImportError:\n        raise ImportError(\n            \"mapclassify is required for this function. Install with `pip install mapclassify`.\"\n        )\n\n    if (\n        isinstance(data, gpd.GeoDataFrame)\n        or isinstance(data, pd.DataFrame)\n        or isinstance(data, pd.Series)\n    ):\n        df = data\n    else:\n        try:\n            df = gpd.read_file(data)\n        except Exception:\n            raise TypeError(\n                \"Data must be a GeoDataFrame or a path to a file that can be read by geopandas.read_file().\"\n            )\n\n    if df.empty:\n        warnings.warn(\n            \"The GeoDataFrame you are attempting to plot is \"\n            \"empty. Nothing has been displayed.\",\n            UserWarning,\n        )\n        return\n\n    columns = df.columns.values.tolist()\n    if column not in columns:\n        raise ValueError(\n            f\"{column} is not a column in the GeoDataFrame. It must be one of {columns}.\"\n        )\n\n    # Convert categorical data to numeric\n    init_column = None\n    value_list = None\n    if np.issubdtype(df[column].dtype, np.object0):\n        value_list = df[column].unique().tolist()\n        value_list.sort()\n        df[\"category\"] = df[column].replace(value_list, range(0, len(value_list)))\n        init_column = column\n        column = \"category\"\n        k = len(value_list)\n\n    if legend_kwds is not None:\n        legend_kwds = legend_kwds.copy()\n\n    # To accept pd.Series and np.arrays as column\n    if isinstance(column, (np.ndarray, pd.Series)):\n        if column.shape[0] != df.shape[0]:\n            raise ValueError(\n                \"The dataframe and given column have different number of rows.\"\n            )\n        else:\n            values = column\n\n            # Make sure index of a Series matches index of df\n            if isinstance(values, pd.Series):\n                values = values.reindex(df.index)\n    else:\n        values = df[column]\n\n    values = df[column]\n    nan_idx = np.asarray(pd.isna(values), dtype=\"bool\")\n\n    if cmap is None:\n        cmap = \"Blues\"\n    cmap = plt.cm.get_cmap(cmap, k)\n    if colors is None:\n        colors = [mpl.colors.rgb2hex(cmap(i))[1:] for i in range(cmap.N)]\n        colors = [\"#\" + i for i in colors]\n    elif isinstance(colors, list):\n        colors = [check_color(i) for i in colors]\n    elif isinstance(colors, str):\n        colors = [check_color(colors)] * k\n\n    allowed_schemes = [\n        \"BoxPlot\",\n        \"EqualInterval\",\n        \"FisherJenks\",\n        \"FisherJenksSampled\",\n        \"HeadTailBreaks\",\n        \"JenksCaspall\",\n        \"JenksCaspallForced\",\n        \"JenksCaspallSampled\",\n        \"MaxP\",\n        \"MaximumBreaks\",\n        \"NaturalBreaks\",\n        \"Quantiles\",\n        \"Percentiles\",\n        \"StdMean\",\n        \"UserDefined\",\n    ]\n\n    if scheme.lower() not in [s.lower() for s in allowed_schemes]:\n        raise ValueError(\n            f\"{scheme} is not a valid scheme. It must be one of {allowed_schemes}.\"\n        )\n\n    if classification_kwds is None:\n        classification_kwds = {}\n    if \"k\" not in classification_kwds:\n        classification_kwds[\"k\"] = k\n\n    binning = mapclassify.classify(\n        np.asarray(values[~nan_idx]), scheme, **classification_kwds\n    )\n    df[\"category\"] = binning.yb\n    df[\"color\"] = [colors[i] for i in df[\"category\"]]\n\n    if legend_kwds is None:\n        legend_kwds = {}\n\n    if \"interval\" not in legend_kwds:\n        legend_kwds[\"interval\"] = True\n\n    if \"fmt\" not in legend_kwds:\n        if np.issubdtype(df[column].dtype, np.floating):\n            legend_kwds[\"fmt\"] = \"{:.2f}\"\n        else:\n            legend_kwds[\"fmt\"] = \"{:.0f}\"\n\n    if labels is None:\n        # set categorical to True for creating the legend\n        if legend_kwds is not None and \"labels\" in legend_kwds:\n            if len(legend_kwds[\"labels\"]) != binning.k:\n                raise ValueError(\n                    \"Number of labels must match number of bins, \"\n                    \"received {} labels for {} bins\".format(\n                        len(legend_kwds[\"labels\"]), binning.k\n                    )\n                )\n            else:\n                labels = list(legend_kwds.pop(\"labels\"))\n        else:\n            # fmt = \"{:.2f}\"\n            if legend_kwds is not None and \"fmt\" in legend_kwds:\n                fmt = legend_kwds.pop(\"fmt\")\n\n            labels = binning.get_legend_classes(fmt)\n            if legend_kwds is not None:\n                show_interval = legend_kwds.pop(\"interval\", False)\n            else:\n                show_interval = False\n            if not show_interval:\n                labels = [c[1:-1] for c in labels]\n\n        if init_column is not None:\n            labels = value_list\n    elif isinstance(labels, list):\n        if len(labels) != len(colors):\n            raise ValueError(\"The number of labels must match the number of colors.\")\n    else:\n        raise ValueError(\"labels must be a list or None.\")\n\n    legend_dict = dict(zip(labels, colors))\n    df[\"category\"] = df[\"category\"] + 1\n    return df, legend_dict\n</code></pre>"},{"location":"common/#geopypi.common.df_to_gdf","title":"<code>df_to_gdf(df, geometry='geometry', src_crs='EPSG:4326', dst_crs=None, **kwargs)</code>","text":"<p>Converts a pandas DataFrame to a GeoPandas GeoDataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pandas.DataFrame</code> <p>The pandas DataFrame to convert.</p> required <code>geometry</code> <code>str</code> <p>The name of the geometry column in the DataFrame.</p> <code>'geometry'</code> <code>src_crs</code> <code>str</code> <p>The coordinate reference system (CRS) of the GeoDataFrame. Default is \"EPSG:4326\".</p> <code>'EPSG:4326'</code> <code>dst_crs</code> <code>str</code> <p>The target CRS of the GeoDataFrame. Default is None</p> <code>None</code> <p>Returns:</p> Type Description <code>geopandas.GeoDataFrame</code> <p>The converted GeoPandas GeoDataFrame.</p> Source code in <code>geopypi/common.py</code> <pre><code>def df_to_gdf(df, geometry=\"geometry\", src_crs=\"EPSG:4326\", dst_crs=None, **kwargs):\n    \"\"\"\n    Converts a pandas DataFrame to a GeoPandas GeoDataFrame.\n\n    Args:\n        df (pandas.DataFrame): The pandas DataFrame to convert.\n        geometry (str): The name of the geometry column in the DataFrame.\n        src_crs (str): The coordinate reference system (CRS) of the GeoDataFrame. Default is \"EPSG:4326\".\n        dst_crs (str): The target CRS of the GeoDataFrame. Default is None\n\n    Returns:\n        geopandas.GeoDataFrame: The converted GeoPandas GeoDataFrame.\n    \"\"\"\n    import geopandas as gpd\n    from shapely import wkt\n\n    # Convert the geometry column to Shapely geometry objects\n    df[geometry] = df[geometry].apply(lambda x: wkt.loads(x))\n\n    # Convert the pandas DataFrame to a GeoPandas GeoDataFrame\n    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs=src_crs, **kwargs)\n    if dst_crs is not None and dst_crs != src_crs:\n        gdf = gdf.to_crs(dst_crs)\n\n    return gdf\n</code></pre>"},{"location":"common/#geopypi.common.download_file","title":"<code>download_file(url=None, output=None, quiet=False, proxy=None, speed=None, use_cookies=True, verify=True, id=None, fuzzy=False, resume=False, unzip=True, overwrite=False, subfolder=False)</code>","text":"<p>Download a file from URL, including Google Drive shared URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>Google Drive URL is also supported. Defaults to None.</p> <code>None</code> <code>output</code> <code>str</code> <p>Output filename. Default is basename of URL.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Suppress terminal output. Default is False.</p> <code>False</code> <code>proxy</code> <code>str</code> <p>Proxy. Defaults to None.</p> <code>None</code> <code>speed</code> <code>float</code> <p>Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.</p> <code>None</code> <code>use_cookies</code> <code>bool</code> <p>Flag to use cookies. Defaults to True.</p> <code>True</code> <code>verify</code> <code>bool | str</code> <p>Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string, in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.</p> <code>True</code> <code>id</code> <code>str</code> <p>Google Drive's file ID. Defaults to None.</p> <code>None</code> <code>fuzzy</code> <code>bool</code> <p>Fuzzy extraction of Google Drive's file Id. Defaults to False.</p> <code>False</code> <code>resume</code> <code>bool</code> <p>Resume the download from existing tmp file if possible. Defaults to False.</p> <code>False</code> <code>unzip</code> <code>bool</code> <p>Unzip the file. Defaults to True.</p> <code>True</code> <code>overwrite</code> <code>bool</code> <p>Overwrite the file if it already exists. Defaults to False.</p> <code>False</code> <code>subfolder</code> <code>bool</code> <p>Create a subfolder with the same name as the file. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>The output file path.</p> Source code in <code>geopypi/common.py</code> <pre><code>def download_file(\n    url=None,\n    output=None,\n    quiet=False,\n    proxy=None,\n    speed=None,\n    use_cookies=True,\n    verify=True,\n    id=None,\n    fuzzy=False,\n    resume=False,\n    unzip=True,\n    overwrite=False,\n    subfolder=False,\n):\n    \"\"\"Download a file from URL, including Google Drive shared URL.\n\n    Args:\n        url (str, optional): Google Drive URL is also supported. Defaults to None.\n        output (str, optional): Output filename. Default is basename of URL.\n        quiet (bool, optional): Suppress terminal output. Default is False.\n        proxy (str, optional): Proxy. Defaults to None.\n        speed (float, optional): Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.\n        use_cookies (bool, optional): Flag to use cookies. Defaults to True.\n        verify (bool | str, optional): Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string,\n            in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.\n        id (str, optional): Google Drive's file ID. Defaults to None.\n        fuzzy (bool, optional): Fuzzy extraction of Google Drive's file Id. Defaults to False.\n        resume (bool, optional): Resume the download from existing tmp file if possible. Defaults to False.\n        unzip (bool, optional): Unzip the file. Defaults to True.\n        overwrite (bool, optional): Overwrite the file if it already exists. Defaults to False.\n        subfolder (bool, optional): Create a subfolder with the same name as the file. Defaults to False.\n\n    Returns:\n        str: The output file path.\n    \"\"\"\n    try:\n        import gdown\n    except ImportError:\n        print(\n            \"The gdown package is required for this function. Use `pip install gdown` to install it.\"\n        )\n        return\n\n    if output is None:\n        if isinstance(url, str) and url.startswith(\"http\"):\n            output = os.path.basename(url)\n\n    out_dir = os.path.abspath(os.path.dirname(output))\n    if not os.path.exists(out_dir):\n        os.makedirs(out_dir)\n\n    if isinstance(url, str):\n        if os.path.exists(os.path.abspath(output)) and (not overwrite):\n            print(\n                f\"{output} already exists. Skip downloading. Set overwrite=True to overwrite.\"\n            )\n            return os.path.abspath(output)\n        else:\n            url = github_raw_url(url)\n\n    if \"https://drive.google.com/file/d/\" in url:\n        fuzzy = True\n\n    output = gdown.download(\n        url, output, quiet, proxy, speed, use_cookies, verify, id, fuzzy, resume\n    )\n\n    if unzip:\n        if output.endswith(\".zip\"):\n            with zipfile.ZipFile(output, \"r\") as zip_ref:\n                if not quiet:\n                    print(\"Extracting files...\")\n                if subfolder:\n                    basename = os.path.splitext(os.path.basename(output))[0]\n\n                    output = os.path.join(out_dir, basename)\n                    if not os.path.exists(output):\n                        os.makedirs(output)\n                    zip_ref.extractall(output)\n                else:\n                    zip_ref.extractall(os.path.dirname(output))\n        elif output.endswith(\".tar.gz\") or output.endswith(\".tar\"):\n            if output.endswith(\".tar.gz\"):\n                mode = \"r:gz\"\n            else:\n                mode = \"r\"\n\n            with tarfile.open(output, mode) as tar_ref:\n                if not quiet:\n                    print(\"Extracting files...\")\n                if subfolder:\n                    basename = os.path.splitext(os.path.basename(output))[0]\n                    output = os.path.join(out_dir, basename)\n                    if not os.path.exists(output):\n                        os.makedirs(output)\n                    tar_ref.extractall(output)\n                else:\n                    tar_ref.extractall(os.path.dirname(output))\n\n    return os.path.abspath(output)\n</code></pre>"},{"location":"common/#geopypi.common.download_files","title":"<code>download_files(urls, out_dir=None, filenames=None, quiet=False, proxy=None, speed=None, use_cookies=True, verify=True, id=None, fuzzy=False, resume=False, unzip=True, overwrite=False, subfolder=False, multi_part=False)</code>","text":"<p>Download files from URLs, including Google Drive shared URL.</p> <p>Parameters:</p> Name Type Description Default <code>urls</code> <code>list</code> <p>The list of urls to download. Google Drive URL is also supported.</p> required <code>out_dir</code> <code>str</code> <p>The output directory. Defaults to None.</p> <code>None</code> <code>filenames</code> <code>list</code> <p>Output filename. Default is basename of URL.</p> <code>None</code> <code>quiet</code> <code>bool</code> <p>Suppress terminal output. Default is False.</p> <code>False</code> <code>proxy</code> <code>str</code> <p>Proxy. Defaults to None.</p> <code>None</code> <code>speed</code> <code>float</code> <p>Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.</p> <code>None</code> <code>use_cookies</code> <code>bool</code> <p>Flag to use cookies. Defaults to True.</p> <code>True</code> <code>verify</code> <code>bool | str</code> <p>Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string, in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.</p> <code>True</code> <code>id</code> <code>str</code> <p>Google Drive's file ID. Defaults to None.</p> <code>None</code> <code>fuzzy</code> <code>bool</code> <p>Fuzzy extraction of Google Drive's file Id. Defaults to False.</p> <code>False</code> <code>resume</code> <code>bool</code> <p>Resume the download from existing tmp file if possible. Defaults to False.</p> <code>False</code> <code>unzip</code> <code>bool</code> <p>Unzip the file. Defaults to True.</p> <code>True</code> <code>overwrite</code> <code>bool</code> <p>Overwrite the file if it already exists. Defaults to False.</p> <code>False</code> <code>subfolder</code> <code>bool</code> <p>Create a subfolder with the same name as the file. Defaults to False.</p> <code>False</code> <code>multi_part</code> <code>bool</code> <p>If the file is a multi-part file. Defaults to False.</p> <code>False</code> <p>Examples:</p> <p>files = [\"sam_hq_vit_tiny.zip\", \"sam_hq_vit_tiny.z01\", \"sam_hq_vit_tiny.z02\", \"sam_hq_vit_tiny.z03\"] base_url = \"https://github.com/opengeos/datasets/releases/download/models/\" urls = [base_url + f for f in files] leafmap.download_files(urls, out_dir=\"models\", multi_part=True)</p> Source code in <code>geopypi/common.py</code> <pre><code>def download_files(\n    urls,\n    out_dir=None,\n    filenames=None,\n    quiet=False,\n    proxy=None,\n    speed=None,\n    use_cookies=True,\n    verify=True,\n    id=None,\n    fuzzy=False,\n    resume=False,\n    unzip=True,\n    overwrite=False,\n    subfolder=False,\n    multi_part=False,\n):\n    \"\"\"Download files from URLs, including Google Drive shared URL.\n\n    Args:\n        urls (list): The list of urls to download. Google Drive URL is also supported.\n        out_dir (str, optional): The output directory. Defaults to None.\n        filenames (list, optional): Output filename. Default is basename of URL.\n        quiet (bool, optional): Suppress terminal output. Default is False.\n        proxy (str, optional): Proxy. Defaults to None.\n        speed (float, optional): Download byte size per second (e.g., 256KB/s = 256 * 1024). Defaults to None.\n        use_cookies (bool, optional): Flag to use cookies. Defaults to True.\n        verify (bool | str, optional): Either a bool, in which case it controls whether the server's TLS certificate is verified, or a string, in which case it must be a path to a CA bundle to use. Default is True.. Defaults to True.\n        id (str, optional): Google Drive's file ID. Defaults to None.\n        fuzzy (bool, optional): Fuzzy extraction of Google Drive's file Id. Defaults to False.\n        resume (bool, optional): Resume the download from existing tmp file if possible. Defaults to False.\n        unzip (bool, optional): Unzip the file. Defaults to True.\n        overwrite (bool, optional): Overwrite the file if it already exists. Defaults to False.\n        subfolder (bool, optional): Create a subfolder with the same name as the file. Defaults to False.\n        multi_part (bool, optional): If the file is a multi-part file. Defaults to False.\n\n    Examples:\n\n        files = [\"sam_hq_vit_tiny.zip\", \"sam_hq_vit_tiny.z01\", \"sam_hq_vit_tiny.z02\", \"sam_hq_vit_tiny.z03\"]\n        base_url = \"https://github.com/opengeos/datasets/releases/download/models/\"\n        urls = [base_url + f for f in files]\n        leafmap.download_files(urls, out_dir=\"models\", multi_part=True)\n    \"\"\"\n\n    if out_dir is None:\n        out_dir = os.getcwd()\n\n    if filenames is None:\n        filenames = [None] * len(urls)\n\n    filepaths = []\n    for url, output in zip(urls, filenames):\n        if output is None:\n            filename = os.path.join(out_dir, os.path.basename(url))\n        else:\n            filename = os.path.join(out_dir, output)\n\n        filepaths.append(filename)\n        if multi_part:\n            unzip = False\n\n        download_file(\n            url,\n            filename,\n            quiet,\n            proxy,\n            speed,\n            use_cookies,\n            verify,\n            id,\n            fuzzy,\n            resume,\n            unzip,\n            overwrite,\n            subfolder,\n        )\n\n    if multi_part:\n        archive = os.path.splitext(filename)[0] + \".zip\"\n        out_dir = os.path.dirname(filename)\n        extract_archive(archive, out_dir)\n\n        for file in filepaths:\n            os.remove(file)\n</code></pre>"},{"location":"common/#geopypi.common.gdf_to_geojson","title":"<code>gdf_to_geojson(gdf, out_geojson=None, epsg=None, tuple_to_list=False, encoding='utf-8')</code>","text":"<p>Converts a GeoDataFame to GeoJSON.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>A GeoPandas GeoDataFrame.</p> required <code>out_geojson</code> <code>str</code> <p>File path to he output GeoJSON. Defaults to None.</p> <code>None</code> <code>epsg</code> <code>str</code> <p>An EPSG string, e.g., \"4326\". Defaults to None.</p> <code>None</code> <code>tuple_to_list</code> <code>bool</code> <p>Whether to convert tuples to lists. Defaults to False.</p> <code>False</code> <code>encoding</code> <code>str</code> <p>The encoding to use for the GeoJSON. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>When the output file extension is incorrect.</p> <code>Exception</code> <p>When the conversion fails.</p> <p>Returns:</p> Type Description <code>dict</code> <p>When the out_json is None returns a dict.</p> Source code in <code>geopypi/common.py</code> <pre><code>def gdf_to_geojson(\n    gdf, out_geojson=None, epsg=None, tuple_to_list=False, encoding=\"utf-8\"\n):\n    \"\"\"Converts a GeoDataFame to GeoJSON.\n\n    Args:\n        gdf (GeoDataFrame): A GeoPandas GeoDataFrame.\n        out_geojson (str, optional): File path to he output GeoJSON. Defaults to None.\n        epsg (str, optional): An EPSG string, e.g., \"4326\". Defaults to None.\n        tuple_to_list (bool, optional): Whether to convert tuples to lists. Defaults to False.\n        encoding (str, optional): The encoding to use for the GeoJSON. Defaults to \"utf-8\".\n\n    Raises:\n        TypeError: When the output file extension is incorrect.\n        Exception: When the conversion fails.\n\n    Returns:\n        dict: When the out_json is None returns a dict.\n    \"\"\"\n    check_package(name=\"geopandas\", URL=\"https://geopandas.org\")\n\n    def listit(t):\n        return list(map(listit, t)) if isinstance(t, (list, tuple)) else t\n\n    try:\n        if epsg is not None:\n            if gdf.crs is not None and gdf.crs.to_epsg() != epsg:\n                gdf = gdf.to_crs(epsg=epsg)\n        geojson = gdf.__geo_interface__\n\n        if tuple_to_list:\n            for feature in geojson[\"features\"]:\n                feature[\"geometry\"][\"coordinates\"] = listit(\n                    feature[\"geometry\"][\"coordinates\"]\n                )\n\n        if out_geojson is None:\n            return geojson\n        else:\n            ext = os.path.splitext(out_geojson)[1]\n            if ext.lower() not in [\".json\", \".geojson\"]:\n                raise TypeError(\n                    \"The output file extension must be either .json or .geojson\"\n                )\n            out_dir = os.path.dirname(out_geojson)\n            if not os.path.exists(out_dir):\n                os.makedirs(out_dir)\n\n            gdf.to_file(out_geojson, driver=\"GeoJSON\", encoding=encoding)\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"common/#geopypi.common.get_geometry_type","title":"<code>get_geometry_type(in_geojson)</code>","text":"<p>Get the geometry type of a GeoJSON file.</p> <p>Parameters:</p> Name Type Description Default <code>in_geojson</code> <code>str | dict</code> <p>The path to the GeoJSON file or a GeoJSON dictionary.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The geometry type. Can be one of \"Point\", \"LineString\", \"Polygon\", \"MultiPoint\",     \"MultiLineString\", \"MultiPolygon\", \"GeometryCollection\", or \"Unknown\".</p> Source code in <code>geopypi/common.py</code> <pre><code>def get_geometry_type(in_geojson: Union[str, Dict]) -&gt; str:\n    \"\"\"Get the geometry type of a GeoJSON file.\n\n    Args:\n        in_geojson (str | dict): The path to the GeoJSON file or a GeoJSON dictionary.\n\n    Returns:\n        str: The geometry type. Can be one of \"Point\", \"LineString\", \"Polygon\", \"MultiPoint\",\n            \"MultiLineString\", \"MultiPolygon\", \"GeometryCollection\", or \"Unknown\".\n    \"\"\"\n\n    import geojson\n\n    try:\n        if isinstance(in_geojson, str):  # If input is a file path\n            with open(in_geojson, \"r\") as geojson_file:\n                geojson_data = geojson.load(geojson_file)\n        elif isinstance(in_geojson, dict):  # If input is a GeoJSON dictionary\n            geojson_data = in_geojson\n        else:\n            return \"Invalid input type. Expected file path or dictionary.\"\n\n        if \"type\" in geojson_data:\n            if geojson_data[\"type\"] == \"FeatureCollection\":\n                features = geojson_data.get(\"features\", [])\n                if features:\n                    first_feature = features[0]\n                    geometry = first_feature.get(\"geometry\")\n                    if geometry and \"type\" in geometry:\n                        return geometry[\"type\"]\n                    else:\n                        return \"No geometry type found in the first feature.\"\n                else:\n                    return \"No features found in the FeatureCollection.\"\n            elif geojson_data[\"type\"] == \"Feature\":\n                geometry = geojson_data.get(\"geometry\")\n                if geometry and \"type\" in geometry:\n                    return geometry[\"type\"]\n                else:\n                    return \"No geometry type found in the Feature.\"\n            else:\n                return \"Unsupported GeoJSON type.\"\n        else:\n            return \"No 'type' field found in the GeoJSON data.\"\n    except Exception as e:\n        raise e\n</code></pre>"},{"location":"common/#geopypi.common.github_raw_url","title":"<code>github_raw_url(url)</code>","text":"<p>Get the raw URL for a GitHub file.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The GitHub URL.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The raw URL.</p> Source code in <code>geopypi/common.py</code> <pre><code>def github_raw_url(url):\n    \"\"\"Get the raw URL for a GitHub file.\n\n    Args:\n        url (str): The GitHub URL.\n    Returns:\n        str: The raw URL.\n    \"\"\"\n    if isinstance(url, str) and url.startswith(\"https://github.com/\") and \"blob\" in url:\n        url = url.replace(\"github.com\", \"raw.githubusercontent.com\").replace(\n            \"blob/\", \"\"\n        )\n    return url\n</code></pre>"},{"location":"common/#geopypi.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geopypi/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"common/#geopypi.common.open_image_from_url","title":"<code>open_image_from_url(url)</code>","text":"<p>Loads an image from the specified URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL of the image.</p> required <p>Returns:</p> Type Description <code>object</code> <p>Image object.</p> Source code in <code>geopypi/common.py</code> <pre><code>def open_image_from_url(url: str):\n    \"\"\"Loads an image from the specified URL.\n\n    Args:\n        url (str): URL of the image.\n\n    Returns:\n        object: Image object.\n    \"\"\"\n    from PIL import Image\n\n    from io import BytesIO\n\n    # from urllib.parse import urlparse\n\n    try:\n        response = requests.get(url)\n        img = Image.open(BytesIO(response.content))\n        return img\n    except Exception as e:\n        print(e)\n\n    def pillow_to_base64(image: Image.Image) -&gt; str:\n        \"\"\"\n        Convert a PIL image to a base64-encoded string.\n\n        Parameters\n        ----------\n        image: PIL.Image.Image\n            The image to be converted.\n\n        Returns\n        -------\n        str\n            The base64-encoded string.\n        \"\"\"\n        in_mem_file = io.BytesIO()\n        image.save(in_mem_file, format=\"JPEG\", subsampling=0, quality=100)\n        img_bytes = in_mem_file.getvalue()  # bytes\n        image_str = base64.b64encode(img_bytes).decode(\"utf-8\")\n        base64_src = f\"data:image/jpg;base64,{image_str}\"\n        return base64_src\n\n    def read_image_as_pil(\n        image: Union[Image.Image, str, np.ndarray], exif_fix: bool = False\n    ):\n        \"\"\"\n        Loads an image as PIL.Image.Image.\n        Args:\n            image : Can be image path or url (str), numpy image (np.ndarray) or PIL.Image\n        \"\"\"\n        # https://stackoverflow.com/questions/56174099/how-to-load-images-larger-than-max-image-pixels-with-pil\n        Image.MAX_IMAGE_PIXELS = None\n\n        if isinstance(image, Image.Image):\n            image_pil = image.convert(\"RGB\")\n        elif isinstance(image, str):\n            # read image if str image path is provided\n            try:\n                image_pil = Image.open(\n                    requests.get(image, stream=True).raw\n                    if str(image).startswith(\"http\")\n                    else image\n                ).convert(\"RGB\")\n                if exif_fix:\n                    image_pil = exif_transpose(image_pil)\n            except:  # handle large/tiff image reading\n                try:\n                    import skimage.io\n                except ImportError:\n                    raise ImportError(\n                        \"Please run 'pip install -U scikit-image imagecodecs' for large image handling.\"\n                    )\n                image_sk = skimage.io.imread(image).astype(np.uint8)\n                if len(image_sk.shape) == 2:  # b&amp;w\n                    image_pil = Image.fromarray(image_sk, mode=\"1\").convert(\"RGB\")\n                elif image_sk.shape[2] == 4:  # rgba\n                    image_pil = Image.fromarray(image_sk, mode=\"RGBA\").convert(\"RGB\")\n                elif image_sk.shape[2] == 3:  # rgb\n                    image_pil = Image.fromarray(image_sk, mode=\"RGB\")\n                else:\n                    raise TypeError(\n                        f\"image with shape: {image_sk.shape[3]} is not supported.\"\n                    )\n        elif isinstance(image, np.ndarray):\n            if image.shape[0] &lt; 5:  # image in CHW\n                image = image[:, :, ::-1]\n            image_pil = Image.fromarray(image).convert(\"RGB\")\n        else:\n            raise TypeError(\"read image with 'pillow' using 'Image.open()'\")\n\n        return image_pil\n</code></pre>"},{"location":"common/#geopypi.common.random_number","title":"<code>random_number()</code>","text":"<p>Returns a random number between 1 and 100.</p> Source code in <code>geopypi/common.py</code> <pre><code>def random_number():\n    \"\"\"Returns a random number between 1 and 100.\n    \"\"\"\n    import random\n    return random.randint(1, 100)\n</code></pre>"},{"location":"common/#geopypi.common.read_parquet","title":"<code>read_parquet(source, geometry=None, columns=None, exclude=None, db=None, table_name=None, sql=None, limit=None, src_crs=None, dst_crs=None, return_type='gdf', **kwargs)</code>","text":"<p>Read Parquet data from a source and return a GeoDataFrame or DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the Parquet file or directory containing Parquet files.</p> required <code>geometry</code> <code>str</code> <p>The name of the geometry column. Defaults to None.</p> <code>None</code> <code>columns</code> <code>str or list</code> <p>The columns to select. Defaults to None (select all columns).</p> <code>None</code> <code>exclude</code> <code>str or list</code> <p>The columns to exclude from the selection. Defaults to None.</p> <code>None</code> <code>db</code> <code>str</code> <p>The DuckDB database path or alias. Defaults to None.</p> <code>None</code> <code>table_name</code> <code>str</code> <p>The name of the table in the DuckDB database. Defaults to None.</p> <code>None</code> <code>sql</code> <code>str</code> <p>The SQL query to execute. Defaults to None.</p> <code>None</code> <code>limit</code> <code>int</code> <p>The maximum number of rows to return. Defaults to None (return all rows).</p> <code>None</code> <code>src_crs</code> <code>str</code> <p>The source CRS (Coordinate Reference System) of the geometries. Defaults to None.</p> <code>None</code> <code>dst_crs</code> <code>str</code> <p>The target CRS to reproject the geometries. Defaults to None.</p> <code>None</code> <code>return_type</code> <code>str</code> <p>The type of object to return: - 'gdf': GeoDataFrame (default) - 'df': DataFrame - 'numpy': NumPy array - 'arrow': Arrow Table - 'polars': Polars DataFrame</p> <code>'gdf'</code> <code>**kwargs</code> <p>Additional keyword arguments that are passed to the DuckDB connection.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Union[gpd.GeoDataFrame, pd.DataFrame, np.ndarray]</code> <p>The loaded data.</p> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If the columns or exclude arguments are not of the correct type.</p> Source code in <code>geopypi/common.py</code> <pre><code>def read_parquet(\n    source: str,\n    geometry: Optional[str] = None,\n    columns: Optional[Union[str, list]] = None,\n    exclude: Optional[Union[str, list]] = None,\n    db: Optional[str] = None,\n    table_name: Optional[str] = None,\n    sql: Optional[str] = None,\n    limit: Optional[int] = None,\n    src_crs: Optional[str] = None,\n    dst_crs: Optional[str] = None,\n    return_type: str = \"gdf\",\n    **kwargs,\n):\n    \"\"\"\n    Read Parquet data from a source and return a GeoDataFrame or DataFrame.\n\n    Args:\n        source (str): The path to the Parquet file or directory containing Parquet files.\n        geometry (str, optional): The name of the geometry column. Defaults to None.\n        columns (str or list, optional): The columns to select. Defaults to None (select all columns).\n        exclude (str or list, optional): The columns to exclude from the selection. Defaults to None.\n        db (str, optional): The DuckDB database path or alias. Defaults to None.\n        table_name (str, optional): The name of the table in the DuckDB database. Defaults to None.\n        sql (str, optional): The SQL query to execute. Defaults to None.\n        limit (int, optional): The maximum number of rows to return. Defaults to None (return all rows).\n        src_crs (str, optional): The source CRS (Coordinate Reference System) of the geometries. Defaults to None.\n        dst_crs (str, optional): The target CRS to reproject the geometries. Defaults to None.\n        return_type (str, optional): The type of object to return:\n            - 'gdf': GeoDataFrame (default)\n            - 'df': DataFrame\n            - 'numpy': NumPy array\n            - 'arrow': Arrow Table\n            - 'polars': Polars DataFrame\n        **kwargs: Additional keyword arguments that are passed to the DuckDB connection.\n\n    Returns:\n        Union[gpd.GeoDataFrame, pd.DataFrame, np.ndarray]: The loaded data.\n\n    Raises:\n        ValueError: If the columns or exclude arguments are not of the correct type.\n\n    \"\"\"\n    import duckdb\n\n    if isinstance(db, str):\n        con = duckdb.connect(db)\n    else:\n        con = duckdb.connect()\n\n    con.install_extension(\"httpfs\")\n    con.load_extension(\"httpfs\")\n\n    con.install_extension(\"spatial\")\n    con.load_extension(\"spatial\")\n\n    if columns is None:\n        columns = \"*\"\n    elif isinstance(columns, list):\n        columns = \", \".join(columns)\n    elif not isinstance(columns, str):\n        raise ValueError(\"columns must be a list or a string.\")\n\n    if exclude is not None:\n        if isinstance(exclude, list):\n            exclude = \", \".join(exclude)\n        elif not isinstance(exclude, str):\n            raise ValueError(\"exclude_columns must be a list or a string.\")\n        columns = f\"{columns} EXCLUDE {exclude}\"\n\n    if return_type in [\"df\", \"numpy\", \"arrow\", \"polars\"]:\n        if sql is None:\n            sql = f\"SELECT {columns} FROM '{source}'\"\n        if limit is not None:\n            sql += f\" LIMIT {limit}\"\n\n        if return_type == \"df\":\n            result = con.sql(sql, **kwargs).df()\n        elif return_type == \"numpy\":\n            result = con.sql(sql, **kwargs).fetchnumpy()\n        elif return_type == \"arrow\":\n            result = con.sql(sql, **kwargs).arrow()\n        elif return_type == \"polars\":\n            result = con.sql(sql, **kwargs).pl()\n\n        if table_name is not None:\n            con.sql(f\"CREATE OR REPLACE TABLE {table_name} AS FROM result\", **kwargs)\n\n    elif return_type == \"gdf\":\n        if geometry is None:\n            geometry = \"geometry\"\n        if sql is None:\n            # if src_crs is not None and dst_crs is not None:\n            #     geom_sql = f\"ST_AsText(ST_Transform(ST_GeomFromWKB({geometry}), '{src_crs}', '{dst_crs}', true)) AS {geometry}\"\n            # else:\n            geom_sql = f\"ST_AsText(ST_GeomFromWKB({geometry})) AS {geometry}\"\n            sql = f\"SELECT {columns} EXCLUDE {geometry}, {geom_sql} FROM '{source}'\"\n        if limit is not None:\n            sql += f\" LIMIT {limit}\"\n\n        df = con.sql(sql, **kwargs).df()\n        if table_name is not None:\n            con.sql(f\"CREATE OR REPLACE TABLE {table_name} AS FROM df\", **kwargs)\n        result = df_to_gdf(df, geometry=geometry, src_crs=src_crs, dst_crs=dst_crs)\n\n    con.close()\n    return result\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Metaliguns77/Geopypi/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>Geopypi could always use more documentation, whether as part of the official Geopypi docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Metaliguns77/Geopypi/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up Geopypi for local development.</p> <ol> <li> <p>Fork the Geopypi repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/Geopypi.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv Geopypi\n$ cd Geopypi/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 Geopypi tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Metaliguns77/Geopypi/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geopypi/","title":"geopypi module","text":"<p>Main module.</p>"},{"location":"geopypi/#geopypi.geopypi.ImageOverlay","title":"<code> ImageOverlay            (ImageOverlay)         </code>","text":"<p>ImageOverlay class.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>http URL or local file path to the image.</p> required <code>bounds</code> <code>tuple</code> <p>bounding box of the image in the format of (lower_left(lat, lon), upper_right(lat, lon)), such as ((13, -130), (32, -100)).</p> required Source code in <code>geopypi/geopypi.py</code> <pre><code>class ImageOverlay(ipyleaflet.ImageOverlay):\n    \"\"\"ImageOverlay class.\n\n    Args:\n        url (str): http URL or local file path to the image.\n        bounds (tuple): bounding box of the image in the format of (lower_left(lat, lon), upper_right(lat, lon)), such as ((13, -130), (32, -100)).\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        from base64 import b64encode\n        from PIL import Image, ImageSequence\n        from io import BytesIO\n\n        try:\n            url = kwargs.get(\"url\")\n            if not url.startswith(\"http\"):\n                url = os.path.abspath(url)\n                if not os.path.exists(url):\n                    raise FileNotFoundError(\"The provided file does not exist.\")\n\n                ext = os.path.splitext(url)[1][1:]  # file extension\n                image = Image.open(url)\n\n                f = BytesIO()\n                if ext.lower() == \"gif\":\n                    frames = []\n                    # Loop over each frame in the animated image\n                    for frame in ImageSequence.Iterator(image):\n                        frame = frame.convert(\"RGBA\")\n                        b = BytesIO()\n                        frame.save(b, format=\"gif\")\n                        frame = Image.open(b)\n                        frames.append(frame)\n                    frames[0].save(\n                        f,\n                        format=\"GIF\",\n                        save_all=True,\n                        append_images=frames[1:],\n                        loop=0,\n                    )\n                else:\n                    image.save(f, ext)\n\n                data = b64encode(f.getvalue())\n                data = data.decode(\"ascii\")\n                url = \"data:image/{};base64,\".format(ext) + data\n                kwargs[\"url\"] = url\n        except Exception as e:\n            raise Exception(e)\n\n        super().__init__(**kwargs)\n\n\n\n    def add_kml(\n        self,\n        in_kml,\n        layer_name=\"Untitled\",\n        style={},\n        hover_style={},\n        style_callback=None,\n        fill_colors=[\"black\"],\n        info_mode=\"on_hover\",\n    ):\n        \"\"\"Adds a KML file to the map.\n\n        Args:\n            in_kml (str): The input file path or HTTP URL to the KML.\n            layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n            style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n            hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n            style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n            fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n            info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n\n        Raises:\n            FileNotFoundError: The provided KML file could not be found.\n        \"\"\"\n\n        if in_kml.startswith(\"http\") and in_kml.endswith(\".kml\"):\n            out_dir = os.path.abspath(\"./cache\")\n            if not os.path.exists(out_dir):\n                os.makedirs(out_dir)\n            in_kml = download_file(in_kml)\n            if not os.path.exists(in_kml):\n                raise FileNotFoundError(\"The downloaded kml file could not be found.\")\n        else:\n            in_kml = os.path.abspath(in_kml)\n            if not os.path.exists(in_kml):\n                raise FileNotFoundError(\"The provided KML could not be found.\")\n\n        self.add_vector(\n            in_kml,\n            layer_name,\n            style=style,\n            hover_style=hover_style,\n            style_callback=style_callback,\n            fill_colors=fill_colors,\n            info_mode=info_mode,\n        )\n    def add_data(\n        self,\n        data,\n        column,\n        colors=None,\n        labels=None,\n        cmap=None,\n        scheme=\"Quantiles\",\n        k=5,\n        add_legend=True,\n        legend_title=None,\n        legend_position=\"bottomright\",\n        legend_kwds=None,\n        classification_kwds=None,\n        layer_name=\"Untitled\",\n        style=None,\n        hover_style=None,\n        style_callback=None,\n        marker_radius=10,\n        marker_args=None,\n        info_mode=\"on_hover\",\n        encoding=\"utf-8\",\n        **kwargs,\n    ):\n        \"\"\"Add vector data to the map with a variety of classification schemes.\n\n        Args:\n            data (str | pd.DataFrame | gpd.GeoDataFrame): The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.\n            column (str): The column to classify.\n            cmap (str, optional): The name of a colormap recognized by matplotlib. Defaults to None.\n            colors (list, optional): A list of colors to use for the classification. Defaults to None.\n            labels (list, optional): A list of labels to use for the legend. Defaults to None.\n            scheme (str, optional): Name of a choropleth classification scheme (requires mapclassify).\n                Name of a choropleth classification scheme (requires mapclassify).\n                A mapclassify.MapClassifier object will be used\n                under the hood. Supported are all schemes provided by mapclassify (e.g.\n                'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled',\n                'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced',\n                'JenksCaspallSampled', 'MaxP', 'MaximumBreaks',\n                'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean',\n                'UserDefined'). Arguments can be passed in classification_kwds.\n            k (int, optional): Number of classes (ignored if scheme is None or if column is categorical). Default to 5.\n            add_legend (bool, optional): Whether to add a legend to the map. Defaults to True.\n            legend_title (str, optional): The title of the legend. Defaults to None.\n            legend_position (str, optional): The position of the legend. Can be 'topleft', 'topright', 'bottomleft', or 'bottomright'. Defaults to 'bottomright'.\n            legend_kwds (dict, optional): Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or `matplotlib.pyplot.colorbar`. Defaults to None.\n                Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or\n                Additional accepted keywords when `scheme` is specified:\n                fmt : string\n                    A formatting specification for the bin edges of the classes in the\n                    legend. For example, to have no decimals: ``{\"fmt\": \"{:.0f}\"}``.\n                labels : list-like\n                    A list of legend labels to override the auto-generated labblels.\n                    Needs to have the same number of elements as the number of\n                    classes (`k`).\n                interval : boolean (default False)\n                    An option to control brackets from mapclassify legend.\n                    If True, open/closed interval brackets are shown in the legend.\n            classification_kwds (dict, optional): Keyword arguments to pass to mapclassify. Defaults to None.\n            layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n            style (dict, optional): A dictionary specifying the style to be used. Defaults to None.\n                style is a dictionary of the following form:\n                    style = {\n                    \"stroke\": False,\n                    \"color\": \"#ff0000\",\n                    \"weight\": 1,\n                    \"opacity\": 1,\n                    \"fill\": True,\n                    \"fillColor\": \"#ffffff\",\n                    \"fillOpacity\": 1.0,\n                    \"dashArray\": \"9\"\n                    \"clickable\": True,\n                }\n            hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n                hover_style is a dictionary of the following form:\n                    hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n            style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n                style_callback is a function that takes the feature as argument and should return a dictionary of the following form:\n                style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n            info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n            encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n            **kwargs: Additional keyword arguments to pass to the GeoJSON class, such as fields, which can be a list of column names to be included in the popup.\n\n        \"\"\"\n\n        gdf, legend_dict = classify(\n            data=data,\n            column=column,\n            cmap=cmap,\n            colors=colors,\n            labels=labels,\n            scheme=scheme,\n            k=k,\n            legend_kwds=legend_kwds,\n            classification_kwds=classification_kwds,\n        )\n\n        if legend_title is None:\n            legend_title = column\n\n        if style is None:\n            style = {\n                # \"stroke\": False,\n                # \"color\": \"#ff0000\",\n                \"weight\": 1,\n                \"opacity\": 1,\n                # \"fill\": True,\n                # \"fillColor\": \"#ffffff\",\n                \"fillOpacity\": 1.0,\n                # \"dashArray\": \"9\"\n                # \"clickable\": True,\n            }\n            if colors is not None:\n                style[\"color\"] = \"#000000\"\n\n        if hover_style is None:\n            hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n\n        if style_callback is None:\n            style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n\n        if gdf.geometry.geom_type.unique().tolist()[0] == \"Point\":\n            columns = gdf.columns.tolist()\n            if \"category\" in columns:\n                columns.remove(\"category\")\n            if \"color\" in columns:\n                columns.remove(\"color\")\n            if marker_args is None:\n                marker_args = {}\n            if \"fill_color\" not in marker_args:\n                marker_args[\"fill_color\"] = gdf[\"color\"].tolist()\n            if \"stroke\" not in marker_args:\n                marker_args[\"stroke\"] = False\n            if \"fill_opacity\" not in marker_args:\n                marker_args[\"fill_opacity\"] = 0.8\n\n            marker_args[\"radius\"] = marker_radius\n\n            self.add_markers(gdf[columns], layer_name=layer_name, **marker_args)\n        else:\n            self.add_gdf(\n                gdf,\n                layer_name=layer_name,\n                style=style,\n                hover_style=hover_style,\n                style_callback=style_callback,\n                info_mode=info_mode,\n                encoding=encoding,\n                **kwargs,\n            )\n        if add_legend:\n            self.add_legend(\n                title=legend_title, legend_dict=legend_dict, position=legend_position\n            )\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.ImageOverlay.add_data","title":"<code>add_data(self, data, column, colors=None, labels=None, cmap=None, scheme='Quantiles', k=5, add_legend=True, legend_title=None, legend_position='bottomright', legend_kwds=None, classification_kwds=None, layer_name='Untitled', style=None, hover_style=None, style_callback=None, marker_radius=10, marker_args=None, info_mode='on_hover', encoding='utf-8', **kwargs)</code>","text":"<p>Add vector data to the map with a variety of classification schemes.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | pd.DataFrame | gpd.GeoDataFrame</code> <p>The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.</p> required <code>column</code> <code>str</code> <p>The column to classify.</p> required <code>cmap</code> <code>str</code> <p>The name of a colormap recognized by matplotlib. Defaults to None.</p> <code>None</code> <code>colors</code> <code>list</code> <p>A list of colors to use for the classification. Defaults to None.</p> <code>None</code> <code>labels</code> <code>list</code> <p>A list of labels to use for the legend. Defaults to None.</p> <code>None</code> <code>scheme</code> <code>str</code> <p>Name of a choropleth classification scheme (requires mapclassify). Name of a choropleth classification scheme (requires mapclassify). A mapclassify.MapClassifier object will be used under the hood. Supported are all schemes provided by mapclassify (e.g. 'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled', 'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced', 'JenksCaspallSampled', 'MaxP', 'MaximumBreaks', 'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean', 'UserDefined'). Arguments can be passed in classification_kwds.</p> <code>'Quantiles'</code> <code>k</code> <code>int</code> <p>Number of classes (ignored if scheme is None or if column is categorical). Default to 5.</p> <code>5</code> <code>add_legend</code> <code>bool</code> <p>Whether to add a legend to the map. Defaults to True.</p> <code>True</code> <code>legend_title</code> <code>str</code> <p>The title of the legend. Defaults to None.</p> <code>None</code> <code>legend_position</code> <code>str</code> <p>The position of the legend. Can be 'topleft', 'topright', 'bottomleft', or 'bottomright'. Defaults to 'bottomright'.</p> <code>'bottomright'</code> <code>legend_kwds</code> <code>dict</code> <p>Keyword arguments to pass to :func:<code>matplotlib.pyplot.legend</code> or <code>matplotlib.pyplot.colorbar</code>. Defaults to None. Keyword arguments to pass to :func:<code>matplotlib.pyplot.legend</code> or Additional accepted keywords when <code>scheme</code> is specified: fmt : string     A formatting specification for the bin edges of the classes in the     legend. For example, to have no decimals: <code>{\"fmt\": \"{:.0f}\"}</code>. labels : list-like     A list of legend labels to override the auto-generated labblels.     Needs to have the same number of elements as the number of     classes (<code>k</code>). interval : boolean (default False)     An option to control brackets from mapclassify legend.     If True, open/closed interval brackets are shown in the legend.</p> <code>None</code> <code>classification_kwds</code> <code>dict</code> <p>Keyword arguments to pass to mapclassify. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to be used.. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>style</code> <code>dict</code> <p>A dictionary specifying the style to be used. Defaults to None. style is a dictionary of the following form:     style = {     \"stroke\": False,     \"color\": \"#ff0000\",     \"weight\": 1,     \"opacity\": 1,     \"fill\": True,     \"fillColor\": \"#ffffff\",     \"fillOpacity\": 1.0,     \"dashArray\": \"9\"     \"clickable\": True, }</p> <code>None</code> <code>hover_style</code> <code>dict</code> <p>Hover style dictionary. Defaults to {}. hover_style is a dictionary of the following form:     hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}</p> <code>None</code> <code>style_callback</code> <code>function</code> <p>Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None. style_callback is a function that takes the feature as argument and should return a dictionary of the following form: style_callback = lambda feat: {\"fillColor\": feat\"properties\"}</p> <code>None</code> <code>info_mode</code> <code>str</code> <p>Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".</p> <code>'on_hover'</code> <code>encoding</code> <code>str</code> <p>The encoding of the GeoJSON file. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the GeoJSON class, such as fields, which can be a list of column names to be included in the popup.</p> <code>{}</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_data(\n    self,\n    data,\n    column,\n    colors=None,\n    labels=None,\n    cmap=None,\n    scheme=\"Quantiles\",\n    k=5,\n    add_legend=True,\n    legend_title=None,\n    legend_position=\"bottomright\",\n    legend_kwds=None,\n    classification_kwds=None,\n    layer_name=\"Untitled\",\n    style=None,\n    hover_style=None,\n    style_callback=None,\n    marker_radius=10,\n    marker_args=None,\n    info_mode=\"on_hover\",\n    encoding=\"utf-8\",\n    **kwargs,\n):\n    \"\"\"Add vector data to the map with a variety of classification schemes.\n\n    Args:\n        data (str | pd.DataFrame | gpd.GeoDataFrame): The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.\n        column (str): The column to classify.\n        cmap (str, optional): The name of a colormap recognized by matplotlib. Defaults to None.\n        colors (list, optional): A list of colors to use for the classification. Defaults to None.\n        labels (list, optional): A list of labels to use for the legend. Defaults to None.\n        scheme (str, optional): Name of a choropleth classification scheme (requires mapclassify).\n            Name of a choropleth classification scheme (requires mapclassify).\n            A mapclassify.MapClassifier object will be used\n            under the hood. Supported are all schemes provided by mapclassify (e.g.\n            'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled',\n            'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced',\n            'JenksCaspallSampled', 'MaxP', 'MaximumBreaks',\n            'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean',\n            'UserDefined'). Arguments can be passed in classification_kwds.\n        k (int, optional): Number of classes (ignored if scheme is None or if column is categorical). Default to 5.\n        add_legend (bool, optional): Whether to add a legend to the map. Defaults to True.\n        legend_title (str, optional): The title of the legend. Defaults to None.\n        legend_position (str, optional): The position of the legend. Can be 'topleft', 'topright', 'bottomleft', or 'bottomright'. Defaults to 'bottomright'.\n        legend_kwds (dict, optional): Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or `matplotlib.pyplot.colorbar`. Defaults to None.\n            Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or\n            Additional accepted keywords when `scheme` is specified:\n            fmt : string\n                A formatting specification for the bin edges of the classes in the\n                legend. For example, to have no decimals: ``{\"fmt\": \"{:.0f}\"}``.\n            labels : list-like\n                A list of legend labels to override the auto-generated labblels.\n                Needs to have the same number of elements as the number of\n                classes (`k`).\n            interval : boolean (default False)\n                An option to control brackets from mapclassify legend.\n                If True, open/closed interval brackets are shown in the legend.\n        classification_kwds (dict, optional): Keyword arguments to pass to mapclassify. Defaults to None.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to None.\n            style is a dictionary of the following form:\n                style = {\n                \"stroke\": False,\n                \"color\": \"#ff0000\",\n                \"weight\": 1,\n                \"opacity\": 1,\n                \"fill\": True,\n                \"fillColor\": \"#ffffff\",\n                \"fillOpacity\": 1.0,\n                \"dashArray\": \"9\"\n                \"clickable\": True,\n            }\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n            hover_style is a dictionary of the following form:\n                hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n            style_callback is a function that takes the feature as argument and should return a dictionary of the following form:\n            style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n        encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n        **kwargs: Additional keyword arguments to pass to the GeoJSON class, such as fields, which can be a list of column names to be included in the popup.\n\n    \"\"\"\n\n    gdf, legend_dict = classify(\n        data=data,\n        column=column,\n        cmap=cmap,\n        colors=colors,\n        labels=labels,\n        scheme=scheme,\n        k=k,\n        legend_kwds=legend_kwds,\n        classification_kwds=classification_kwds,\n    )\n\n    if legend_title is None:\n        legend_title = column\n\n    if style is None:\n        style = {\n            # \"stroke\": False,\n            # \"color\": \"#ff0000\",\n            \"weight\": 1,\n            \"opacity\": 1,\n            # \"fill\": True,\n            # \"fillColor\": \"#ffffff\",\n            \"fillOpacity\": 1.0,\n            # \"dashArray\": \"9\"\n            # \"clickable\": True,\n        }\n        if colors is not None:\n            style[\"color\"] = \"#000000\"\n\n    if hover_style is None:\n        hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n\n    if style_callback is None:\n        style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n\n    if gdf.geometry.geom_type.unique().tolist()[0] == \"Point\":\n        columns = gdf.columns.tolist()\n        if \"category\" in columns:\n            columns.remove(\"category\")\n        if \"color\" in columns:\n            columns.remove(\"color\")\n        if marker_args is None:\n            marker_args = {}\n        if \"fill_color\" not in marker_args:\n            marker_args[\"fill_color\"] = gdf[\"color\"].tolist()\n        if \"stroke\" not in marker_args:\n            marker_args[\"stroke\"] = False\n        if \"fill_opacity\" not in marker_args:\n            marker_args[\"fill_opacity\"] = 0.8\n\n        marker_args[\"radius\"] = marker_radius\n\n        self.add_markers(gdf[columns], layer_name=layer_name, **marker_args)\n    else:\n        self.add_gdf(\n            gdf,\n            layer_name=layer_name,\n            style=style,\n            hover_style=hover_style,\n            style_callback=style_callback,\n            info_mode=info_mode,\n            encoding=encoding,\n            **kwargs,\n        )\n    if add_legend:\n        self.add_legend(\n            title=legend_title, legend_dict=legend_dict, position=legend_position\n        )\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.ImageOverlay.add_kml","title":"<code>add_kml(self, in_kml, layer_name='Untitled', style={}, hover_style={}, style_callback=None, fill_colors=['black'], info_mode='on_hover')</code>","text":"<p>Adds a KML file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_kml</code> <code>str</code> <p>The input file path or HTTP URL to the KML.</p> required <code>layer_name</code> <code>str</code> <p>The layer name to be used.. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>style</code> <code>dict</code> <p>A dictionary specifying the style to be used. Defaults to {}.</p> <code>{}</code> <code>hover_style</code> <code>dict</code> <p>Hover style dictionary. Defaults to {}.</p> <code>{}</code> <code>style_callback</code> <code>function</code> <p>Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.</p> <code>None</code> <code>fill_colors</code> <code>list</code> <p>The random colors to use for filling polygons. Defaults to [\"black\"].</p> <code>['black']</code> <code>info_mode</code> <code>str</code> <p>Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".</p> <code>'on_hover'</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>The provided KML file could not be found.</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_kml(\n    self,\n    in_kml,\n    layer_name=\"Untitled\",\n    style={},\n    hover_style={},\n    style_callback=None,\n    fill_colors=[\"black\"],\n    info_mode=\"on_hover\",\n):\n    \"\"\"Adds a KML file to the map.\n\n    Args:\n        in_kml (str): The input file path or HTTP URL to the KML.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n        fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n\n    Raises:\n        FileNotFoundError: The provided KML file could not be found.\n    \"\"\"\n\n    if in_kml.startswith(\"http\") and in_kml.endswith(\".kml\"):\n        out_dir = os.path.abspath(\"./cache\")\n        if not os.path.exists(out_dir):\n            os.makedirs(out_dir)\n        in_kml = download_file(in_kml)\n        if not os.path.exists(in_kml):\n            raise FileNotFoundError(\"The downloaded kml file could not be found.\")\n    else:\n        in_kml = os.path.abspath(in_kml)\n        if not os.path.exists(in_kml):\n            raise FileNotFoundError(\"The provided KML could not be found.\")\n\n    self.add_vector(\n        in_kml,\n        layer_name,\n        style=style,\n        hover_style=hover_style,\n        style_callback=style_callback,\n        fill_colors=fill_colors,\n        info_mode=info_mode,\n    )\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>geopypi/geopypi.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"    \n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"        \n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n        self.geojson_layers = []\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)   \n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"       \n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name) \n        else:\n            self.add(name)\n\n\n    def add_legend(\n        self,\n        title=\"Legend\",\n        legend_dict=None,\n        labels=None,\n        colors=None,\n        position=\"bottomright\",\n        builtin_legend=None,\n        layer_name=None,\n        **kwargs,\n    ):\n        \"\"\"Adds a customized basemap to the map.\n\n        Args:\n            title (str, optional): Title of the legend. Defaults to 'Legend'.\n            legend_dict (dict, optional): A dictionary containing legend items as keys and color as values. If provided, legend_keys and legend_colors will be ignored. Defaults to None.\n            labels (list, optional): A list of legend keys. Defaults to None.\n            colors (list, optional): A list of legend colors. Defaults to None.\n            position (str, optional): Position of the legend. Defaults to 'bottomright'.\n            builtin_legend (str, optional): Name of the builtin legend to add to the map. Defaults to None.\n            layer_name (str, optional): Layer name of the legend to be associated with. Defaults to None.\n\n        \"\"\"\n        import pkg_resources\n        from IPython.display import display\n\n        pkg_dir = os.path.dirname(\n            pkg_resources.resource_filename(\"leafmap\", \"leafmap.py\")\n        )\n        legend_template = os.path.join(pkg_dir, \"data/template/legend.html\")\n\n        if \"min_width\" not in kwargs.keys():\n            min_width = None\n        if \"max_width\" not in kwargs.keys():\n            max_width = None\n        else:\n            max_width = kwargs[\"max_width\"]\n        if \"min_height\" not in kwargs.keys():\n            min_height = None\n        else:\n            min_height = kwargs[\"min_height\"]\n        if \"max_height\" not in kwargs.keys():\n            max_height = None\n        else:\n            max_height = kwargs[\"max_height\"]\n        if \"height\" not in kwargs.keys():\n            height = None\n        else:\n            height = kwargs[\"height\"]\n        if \"width\" not in kwargs.keys():\n            width = None\n        else:\n            width = kwargs[\"width\"]\n\n        if width is None:\n            max_width = \"300px\"\n        if height is None:\n            max_height = \"400px\"\n\n        if not os.path.exists(legend_template):\n            print(\"The legend template does not exist.\")\n            return\n\n        if labels is not None:\n            if not isinstance(labels, list):\n                print(\"The legend keys must be a list.\")\n                return\n        else:\n            labels = [\"One\", \"Two\", \"Three\", \"Four\", \"etc\"]\n\n        if colors is not None:\n            if not isinstance(colors, list):\n                print(\"The legend colors must be a list.\")\n                return\n            elif all(isinstance(item, tuple) for item in colors):\n                try:\n                    colors = [rgb_to_hex(x) for x in colors]\n                except Exception as e:\n                    print(e)\n            elif all((item.startswith(\"#\") and len(item) == 7) for item in colors):\n                pass\n            elif all((len(item) == 6) for item in colors):\n                pass\n            else:\n                print(\"The legend colors must be a list of tuples.\")\n                return\n        else:\n            colors = [\n                \"#8DD3C7\",\n                \"#FFFFB3\",\n                \"#BEBADA\",\n                \"#FB8072\",\n                \"#80B1D3\",\n            ]\n\n        if len(labels) != len(colors):\n            print(\"The legend keys and values must be the same length.\")\n            return\n\n        allowed_builtin_legends = builtin_legends.keys()\n        if builtin_legend is not None:\n            if builtin_legend not in allowed_builtin_legends:\n                print(\n                    \"The builtin legend must be one of the following: {}\".format(\n                        \", \".join(allowed_builtin_legends)\n                    )\n                )\n                return\n            else:\n                legend_dict = builtin_legends[builtin_legend]\n                labels = list(legend_dict.keys())\n                colors = list(legend_dict.values())\n\n        if legend_dict is not None:\n            if not isinstance(legend_dict, dict):\n                print(\"The legend dict must be a dictionary.\")\n                return\n            else:\n                labels = list(legend_dict.keys())\n                colors = list(legend_dict.values())\n                if all(isinstance(item, tuple) for item in colors):\n                    try:\n                        colors = [rgb_to_hex(x) for x in colors]\n                    except Exception as e:\n                        print(e)\n\n        allowed_positions = [\n            \"topleft\",\n            \"topright\",\n            \"bottomleft\",\n            \"bottomright\",\n        ]\n        if position not in allowed_positions:\n            print(\n                \"The position must be one of the following: {}\".format(\n                    \", \".join(allowed_positions)\n                )\n            )\n            return\n\n        header = []\n        content = []\n        footer = []\n\n        with open(legend_template) as f:\n            lines = f.readlines()\n            lines[3] = lines[3].replace(\"Legend\", title)\n            header = lines[:6]\n            footer = lines[11:]\n\n        for index, key in enumerate(labels):\n            color = colors[index]\n            if not color.startswith(\"#\"):\n                color = \"#\" + color\n            item = \"      &lt;li&gt;&lt;span style='background:{};'&gt;&lt;/span&gt;{}&lt;/li&gt;\\n\".format(\n                color, key\n            )\n            content.append(item)\n\n        legend_html = header + content + footer\n        legend_text = \"\".join(legend_html)\n\n        try:\n            legend_output_widget = widgets.Output(\n                layout={\n                    # \"border\": \"1px solid black\",\n                    \"max_width\": max_width,\n                    \"min_width\": min_width,\n                    \"max_height\": max_height,\n                    \"min_height\": min_height,\n                    \"height\": height,\n                    \"width\": width,\n                    \"overflow\": \"scroll\",\n                }\n            )\n            legend_control = ipyleaflet.WidgetControl(\n                widget=legend_output_widget, position=position\n            )\n            legend_widget = widgets.HTML(value=legend_text)\n            with legend_output_widget:\n                display(legend_widget)\n\n            self.legend_widget = legend_output_widget\n            self.legend_control = legend_control\n            self.add(legend_control)\n\n        except Exception as e:\n            raise Exception(e)\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n\n    def add_geojson(\n        self,\n        in_geojson,\n        layer_name=\"Untitled\",\n        style={},\n        hover_style={},\n        style_callback=None,\n        fill_colors=[\"black\"],\n        info_mode=\"on_hover\",\n        zoom_to_layer=False,\n        encoding=\"utf-8\",\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoJSON file to the map.\n\n        Args:\n            in_geojson (str | dict): The file path or http URL to the input GeoJSON or a dictionary containing the geojson.\n            layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n            style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n            hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n            style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n            fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n            info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n            zoom_to_layer (bool, optional): Whether to zoom to the layer after adding it to the map. Defaults to False.\n            encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n\n        Raises:\n            FileNotFoundError: The provided GeoJSON file could not be found.\n        \"\"\"\n        import json\n        import random\n        import requests\n\n        style_callback_only = False\n\n        if len(style) == 0 and style_callback is not None:\n            style_callback_only = True\n\n        try:\n            if isinstance(in_geojson, str):\n                if in_geojson.startswith(\"http\"):\n                    if is_jupyterlite():\n                        import pyodide\n\n                        output = os.path.basename(in_geojson)\n\n                        output = os.path.abspath(output)\n                        obj = pyodide.http.open_url(in_geojson)\n                        with open(output, \"w\") as fd:\n                            shutil.copyfileobj(obj, fd)\n                        with open(output, \"r\") as fd:\n                            data = json.load(fd)\n                    else:\n                        in_geojson = github_raw_url(in_geojson)\n                        data = requests.get(in_geojson).json()\n                else:\n                    in_geojson = os.path.abspath(in_geojson)\n                    if not os.path.exists(in_geojson):\n                        raise FileNotFoundError(\n                            \"The provided GeoJSON file could not be found.\"\n                        )\n\n                    with open(in_geojson, encoding=encoding) as f:\n                        data = json.load(f)\n            elif isinstance(in_geojson, dict):\n                data = in_geojson\n            else:\n                raise TypeError(\"The input geojson must be a type of str or dict.\")\n        except Exception as e:\n            raise Exception(e)\n\n        geom_type = get_geometry_type(data)\n\n        if not style:\n            style = {\n                # \"stroke\": True,\n                \"color\": \"#3388ff\",\n                \"weight\": 2,\n                \"opacity\": 1,\n                \"fill\": True,\n                \"fillColor\": \"#3388ff\",\n                \"fillOpacity\": 0.2,\n                # \"dashArray\": \"9\"\n                # \"clickable\": True,\n            }\n\n            if geom_type in [\"LineString\", \"MultiLineString\"]:\n                style[\"fill\"] = False\n\n        elif \"weight\" not in style:\n            style[\"weight\"] = 1\n\n        if not hover_style:\n            hover_style = {\"weight\": style[\"weight\"] + 2, \"fillOpacity\": 0}\n\n        def random_color(feature):\n            return {\n                \"color\": \"black\",\n                \"fillColor\": random.choice(fill_colors),\n            }\n\n        toolbar_button = widgets.ToggleButton(\n            value=True,\n            tooltip=\"Toolbar\",\n            icon=\"info\",\n            layout=widgets.Layout(\n                width=\"28px\", height=\"28px\", padding=\"0px 0px 0px 4px\"\n            ),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            # button_style=\"primary\",\n            layout=widgets.Layout(\n                height=\"28px\", width=\"28px\", padding=\"0px 0px 0px 4px\"\n            ),\n        )\n\n        html = widgets.HTML()\n        html.layout.margin = \"0px 10px 0px 10px\"\n        html.layout.max_height = \"250px\"\n        html.layout.max_width = \"250px\"\n\n        output_widget = widgets.VBox(\n            [widgets.HBox([toolbar_button, close_button]), html]\n        )\n        info_control = ipyleaflet.WidgetControl(\n            widget=output_widget, position=\"bottomright\"\n        )\n\n        if info_mode in [\"on_hover\", \"on_click\"]:\n            self.add(info_control)\n\n        def toolbar_btn_click(change):\n            if change[\"new\"]:\n                close_button.value = False\n                output_widget.children = [\n                    widgets.VBox([widgets.HBox([toolbar_button, close_button]), html])\n                ]\n            else:\n                output_widget.children = [widgets.HBox([toolbar_button, close_button])]\n\n        toolbar_button.observe(toolbar_btn_click, \"value\")\n\n        def close_btn_click(change):\n            if change[\"new\"]:\n                toolbar_button.value = False\n                if info_control in self.controls:\n                    self.remove_control(info_control)\n                output_widget.close()\n\n        close_button.observe(close_btn_click, \"value\")\n\n        if \"fields\" in kwargs:\n            fields = kwargs[\"fields\"]\n            kwargs.pop(\"fields\")\n        else:\n            fields = None\n\n        def update_html(feature, fields=fields, **kwargs):\n            if fields is None:\n                fields = list(feature[\"properties\"].keys())\n                if \"style\" in fields:\n                    fields.remove(\"style\")\n\n            value = [\n                \"&lt;b&gt;{}: &lt;/b&gt;{}&lt;br&gt;\".format(prop, feature[\"properties\"][prop])\n                for prop in fields\n            ]\n\n            value = \"\"\"{}\"\"\".format(\"\".join(value))\n            html.value = value\n\n        if style_callback is None:\n            style_callback = random_color\n\n        if style_callback_only:\n            geojson = ipyleaflet.GeoJSON(\n                data=data,\n                hover_style=hover_style,\n                style_callback=style_callback,\n                name=layer_name,\n            )\n        else:\n            geojson = ipyleaflet.GeoJSON(\n                data=data,\n                style=style,\n                hover_style=hover_style,\n                style_callback=style_callback,\n                name=layer_name,\n            )\n\n        if info_mode == \"on_hover\":\n            geojson.on_hover(update_html)\n        elif info_mode == \"on_click\":\n            geojson.on_click(update_html)\n\n        self.add(geojson)\n        self.geojson_layers.append(geojson)\n\n        if not hasattr(self, \"json_layer_dict\"):\n            self.json_layer_dict = {}\n\n        params = {\n            \"data\": geojson,\n            \"style\": style,\n            \"hover_style\": hover_style,\n            \"style_callback\": style_callback,\n        }\n        self.json_layer_dict[layer_name] = params\n\n        if zoom_to_layer:\n            try:\n                import numpy as np\n                import geopandas as gpd\n\n                gdf = gpd.GeoDataFrame.from_features(data)\n                if gdf.crs is None:\n                    gdf.crs = \"EPSG:4326\"\n                bounds = gdf.to_crs(epsg=\"4326\").bounds\n                west = np.min(bounds[\"minx\"])\n                south = np.min(bounds[\"miny\"])\n                east = np.max(bounds[\"maxx\"])\n                north = np.max(bounds[\"maxy\"])\n                self.fit_bounds([[south, east], [north, west]])\n            except Exception as e:\n                print(e)\n    def add_data(\n        self,\n        data,\n        column,\n        colors=None,\n        labels=None,\n        cmap=None,\n        scheme=\"Quantiles\",\n        k=5,\n        add_legend=True,\n        legend_title=None,\n        legend_position=\"bottomright\",\n        legend_kwds=None,\n        classification_kwds=None,\n        layer_name=\"Untitled\",\n        style=None,\n        hover_style=None,\n        style_callback=None,\n        marker_radius=10,\n        marker_args=None,\n        info_mode=\"on_hover\",\n        encoding=\"utf-8\",\n        **kwargs,\n    ):\n        \"\"\"Add vector data to the map with a variety of classification schemes.\n\n        Args:\n            data (str | pd.DataFrame | gpd.GeoDataFrame): The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.\n            column (str): The column to classify.\n            cmap (str, optional): The name of a colormap recognized by matplotlib. Defaults to None.\n            colors (list, optional): A list of colors to use for the classification. Defaults to None.\n            labels (list, optional): A list of labels to use for the legend. Defaults to None.\n            scheme (str, optional): Name of a choropleth classification scheme (requires mapclassify).\n                Name of a choropleth classification scheme (requires mapclassify).\n                A mapclassify.MapClassifier object will be used\n                under the hood. Supported are all schemes provided by mapclassify (e.g.\n                'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled',\n                'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced',\n                'JenksCaspallSampled', 'MaxP', 'MaximumBreaks',\n                'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean',\n                'UserDefined'). Arguments can be passed in classification_kwds.\n            k (int, optional): Number of classes (ignored if scheme is None or if column is categorical). Default to 5.\n            add_legend (bool, optional): Whether to add a legend to the map. Defaults to True.\n            legend_title (str, optional): The title of the legend. Defaults to None.\n            legend_position (str, optional): The position of the legend. Can be 'topleft', 'topright', 'bottomleft', or 'bottomright'. Defaults to 'bottomright'.\n            legend_kwds (dict, optional): Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or `matplotlib.pyplot.colorbar`. Defaults to None.\n                Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or\n                Additional accepted keywords when `scheme` is specified:\n                fmt : string\n                    A formatting specification for the bin edges of the classes in the\n                    legend. For example, to have no decimals: ``{\"fmt\": \"{:.0f}\"}``.\n                labels : list-like\n                    A list of legend labels to override the auto-generated labblels.\n                    Needs to have the same number of elements as the number of\n                    classes (`k`).\n                interval : boolean (default False)\n                    An option to control brackets from mapclassify legend.\n                    If True, open/closed interval brackets are shown in the legend.\n            classification_kwds (dict, optional): Keyword arguments to pass to mapclassify. Defaults to None.\n            layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n            style (dict, optional): A dictionary specifying the style to be used. Defaults to None.\n                style is a dictionary of the following form:\n                    style = {\n                    \"stroke\": False,\n                    \"color\": \"#ff0000\",\n                    \"weight\": 1,\n                    \"opacity\": 1,\n                    \"fill\": True,\n                    \"fillColor\": \"#ffffff\",\n                    \"fillOpacity\": 1.0,\n                    \"dashArray\": \"9\"\n                    \"clickable\": True,\n                }\n            hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n                hover_style is a dictionary of the following form:\n                    hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n            style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n                style_callback is a function that takes the feature as argument and should return a dictionary of the following form:\n                style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n            info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n            encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n            **kwargs: Additional keyword arguments to pass to the GeoJSON class, such as fields, which can be a list of column names to be included in the popup.\n\n        \"\"\"\n\n        gdf, legend_dict = classify(\n            data=data,\n            column=column,\n            cmap=cmap,\n            colors=colors,\n            labels=labels,\n            scheme=scheme,\n            k=k,\n            legend_kwds=legend_kwds,\n            classification_kwds=classification_kwds,\n        )\n\n        if legend_title is None:\n            legend_title = column\n\n        if style is None:\n            style = {\n                # \"stroke\": False,\n                # \"color\": \"#ff0000\",\n                \"weight\": 1,\n                \"opacity\": 1,\n                # \"fill\": True,\n                # \"fillColor\": \"#ffffff\",\n                \"fillOpacity\": 1.0,\n                # \"dashArray\": \"9\"\n                # \"clickable\": True,\n            }\n            if colors is not None:\n                style[\"color\"] = \"#000000\"\n\n        if hover_style is None:\n            hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n\n        if style_callback is None:\n            style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n\n        if gdf.geometry.geom_type.unique().tolist()[0] == \"Point\":\n            columns = gdf.columns.tolist()\n            if \"category\" in columns:\n                columns.remove(\"category\")\n            if \"color\" in columns:\n                columns.remove(\"color\")\n            if marker_args is None:\n                marker_args = {}\n            if \"fill_color\" not in marker_args:\n                marker_args[\"fill_color\"] = gdf[\"color\"].tolist()\n            if \"stroke\" not in marker_args:\n                marker_args[\"stroke\"] = False\n            if \"fill_opacity\" not in marker_args:\n                marker_args[\"fill_opacity\"] = 0.8\n\n            marker_args[\"radius\"] = marker_radius\n\n            self.add_markers(gdf[columns], layer_name=layer_name, **marker_args)\n        else:\n            self.add_gdf(\n                gdf,\n                layer_name=layer_name,\n                style=style,\n                hover_style=hover_style,\n                style_callback=style_callback,\n                info_mode=info_mode,\n                encoding=encoding,\n                **kwargs,\n            )\n        if add_legend:\n            self.add_legend(\n                title=legend_title, legend_dict=legend_dict, position=legend_position\n            )    \n\n    def add_shp(\n        self,\n        in_shp,\n        layer_name=\"Untitled\",\n        style={},\n        hover_style={},\n        style_callback=None,\n        fill_colors=[\"black\"],\n        info_mode=\"on_hover\",\n        zoom_to_layer=False,\n        encoding=\"utf-8\",\n    ):\n        \"\"\"Adds a shapefile to the map.\n\n        Args:\n            in_shp (str): The input file path or HTTP URL (*.zip) to the shapefile.\n            layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n            style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n            hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n            style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n            fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n            info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n            zoom_to_layer (bool, optional): Whether to zoom to the layer after adding it to the map. Defaults to False.\n            encoding (str, optional): The encoding of the shapefile. Defaults to \"utf-8\".\n\n        Raises:\n            FileNotFoundError: The provided shapefile could not be found.\n        \"\"\"\n\n        import glob\n\n        if in_shp.startswith(\"http\") and in_shp.endswith(\".zip\"):\n            out_dir = os.path.dirname(temp_file_path(\".shp\"))\n            if not os.path.exists(out_dir):\n                os.makedirs(out_dir)\n            basename = os.path.basename(in_shp)\n            filename = os.path.join(out_dir, basename)\n            download_file(in_shp, filename)\n            files = list(glob.glob(os.path.join(out_dir, \"*.shp\")))\n            if len(files) &gt; 0:\n                in_shp = files[0]\n            else:\n                raise FileNotFoundError(\n                    \"The downloaded zip file does not contain any shapefile in the root directory.\"\n                )\n        else:\n            in_shp = os.path.abspath(in_shp)\n            if not os.path.exists(in_shp):\n                raise FileNotFoundError(\"The provided shapefile could not be found.\")\n\n        geojson = shp_to_geojson(in_shp, encoding=encoding)\n        self.add_geojson(\n            geojson,\n            layer_name,\n            style,\n            hover_style,\n            style_callback,\n            fill_colors,\n            info_mode,\n            zoom_to_layer,\n            encoding,\n        )\n\n\n\n        import geopandas as gpd\n        from ipyleaflet import GeoData\n        from shapely.geometry import Point, LineString\n\n    def add_vector(self, data):\n        \"\"\"\n        Add vector data to the map.\n\n        Args:\n            data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n        \"\"\"\n        import geopandas as gpd\n        from ipyleaflet import GeoData\n\n        if isinstance(data, gpd.GeoDataFrame):\n            vector_layer = GeoData(geo_dataframe=data)\n\n        elif isinstance(data, str):\n            vector_layer = GeoData(geo_dataframe=gpd.read_file(data))\n\n        else:\n            raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n        self.add_layer(vector_layer)\n\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image to add.\n            bounds (list): The bounds of the image as a list of tuples.\n            name (str, optional): The name of the image overlay. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider(\n            self, description=\"Zoom level:\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to add.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n    def add_gdf(\n        self,\n        gdf,\n        layer_name=\"Untitled\",\n        style={},\n        hover_style={},\n        style_callback=None,\n        fill_colors=[\"black\"],\n        info_mode=\"on_hover\",\n        zoom_to_layer=False,\n        encoding=\"utf-8\",\n        **kwargs,\n    ):\n        \"\"\"Adds a GeoDataFrame to the map.\n\n        Args:\n            gdf (GeoDataFrame): A GeoPandas GeoDataFrame.\n            layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n            style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n            hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n            style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n            fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n            info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n            zoom_to_layer (bool, optional): Whether to zoom to the layer. Defaults to False.\n            encoding (str, optional): The encoding of the GeoDataFrame. Defaults to \"utf-8\".\n        \"\"\"\n        for col in gdf.columns:\n            try:\n                if gdf[col].dtype in [\"datetime64[ns]\", \"datetime64[ns, UTC]\"]:\n                    gdf[col] = gdf[col].astype(str)\n            except:\n                pass\n\n        data = gdf_to_geojson(gdf, epsg=\"4326\")\n\n        self.add_geojson(\n            data,\n            layer_name,\n            style,\n            hover_style,\n            style_callback,\n            fill_colors,\n            info_mode,\n            zoom_to_layer,\n            encoding,\n            **kwargs,\n        )\n\n        if zoom_to_layer:\n            import numpy as np\n\n            bounds = gdf.to_crs(epsg=\"4326\").bounds\n            west = np.min(bounds[\"minx\"])\n            south = np.min(bounds[\"miny\"])\n            east = np.max(bounds[\"maxx\"])\n            north = np.max(bounds[\"maxy\"])\n            self.fit_bounds([[south, east], [north, west]])\n\n    def add_opacity_slider(\n            self, layer_index=-1, description=\"Opacity:\", position=\"topright\"):\n        \"\"\"Adds an opacity slider for the specified layer.\n\n        Args:\n            layer (object): The layer for which to add the opacity slider.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n        )\n\n        def update_opacity(change):\n            \"\"\"\n            Updates the opacity of a layer based on the new value from a slider.\n\n            This function is designed to be used as a callback for an ipywidgets slider. \n            It takes a dictionary with a \"new\" key representing the new value of the slider, \n            and sets the opacity of a global layer variable to this new value.\n\n            Args:\n            change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n            Returns:\n                None\n            \"\"\"\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n        from ipywidgets import Dropdown, Button, HBox\n\n    def add_basemap_gui(self, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"CartoDB.DarkMatter\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            value=\"OpenStreetMap\",\n        )\n\n        close_button = widgets.Button(\n            icon='times', \n            layout={'width': '35px'}  \n        )\n\n        def on_basemap_change(change):\n            \"\"\"\n            Handles the event of changing the basemap on the map.\n\n            This function is designed to be used as a callback for an ipywidgets dropdown. \n            It takes a dictionary with a \"new\" key representing the new value of the dropdown, \n            and calls the add_basemap method with this new value.\n\n            Args:\n                change (dict): A dictionary with a \"new\" key representing the new value of the dropdown.\n\n            Returns:\n                None\n            \"\"\"\n\n            self.add_basemap(change['new'])\n\n\n        def on_close_button_clicked(button):\n            \"\"\"\n            Handles the event of clicking the close button on a control.\n\n            This function is designed to be used as a callback for a button click event. \n            It takes a button instance as an argument, and calls the remove method \n            to remove a global control variable from the map.\n\n            Args:\n                button (ipywidgets.Button): The button that was clicked.\n\n            Returns:\n                None\n            \"\"\"\n            self.remove(control)\n\n        basemap_selector.observe(on_basemap_change, \"value\")\n        close_button.on_click(on_close_button_clicked)\n\n        widget_box = widgets.HBox([basemap_selector, close_button])\n        control = ipyleaflet.WidgetControl(widget=widget_box, position=position)\n        self.add(control)    \n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"        \n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n    self.geojson_layers = []\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"       \n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name) \n    else:\n        self.add(name)\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_basemap_gui(self, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"CartoDB.DarkMatter\",\n            \"Esri.NatGeoWorldMap\",\n        ],\n        value=\"OpenStreetMap\",\n    )\n\n    close_button = widgets.Button(\n        icon='times', \n        layout={'width': '35px'}  \n    )\n\n    def on_basemap_change(change):\n        \"\"\"\n        Handles the event of changing the basemap on the map.\n\n        This function is designed to be used as a callback for an ipywidgets dropdown. \n        It takes a dictionary with a \"new\" key representing the new value of the dropdown, \n        and calls the add_basemap method with this new value.\n\n        Args:\n            change (dict): A dictionary with a \"new\" key representing the new value of the dropdown.\n\n        Returns:\n            None\n        \"\"\"\n\n        self.add_basemap(change['new'])\n\n\n    def on_close_button_clicked(button):\n        \"\"\"\n        Handles the event of clicking the close button on a control.\n\n        This function is designed to be used as a callback for a button click event. \n        It takes a button instance as an argument, and calls the remove method \n        to remove a global control variable from the map.\n\n        Args:\n            button (ipywidgets.Button): The button that was clicked.\n\n        Returns:\n            None\n        \"\"\"\n        self.remove(control)\n\n    basemap_selector.observe(on_basemap_change, \"value\")\n    close_button.on_click(on_close_button_clicked)\n\n    widget_box = widgets.HBox([basemap_selector, close_button])\n    control = ipyleaflet.WidgetControl(widget=widget_box, position=position)\n    self.add(control)    \n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_data","title":"<code>add_data(self, data, column, colors=None, labels=None, cmap=None, scheme='Quantiles', k=5, add_legend=True, legend_title=None, legend_position='bottomright', legend_kwds=None, classification_kwds=None, layer_name='Untitled', style=None, hover_style=None, style_callback=None, marker_radius=10, marker_args=None, info_mode='on_hover', encoding='utf-8', **kwargs)</code>","text":"<p>Add vector data to the map with a variety of classification schemes.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | pd.DataFrame | gpd.GeoDataFrame</code> <p>The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.</p> required <code>column</code> <code>str</code> <p>The column to classify.</p> required <code>cmap</code> <code>str</code> <p>The name of a colormap recognized by matplotlib. Defaults to None.</p> <code>None</code> <code>colors</code> <code>list</code> <p>A list of colors to use for the classification. Defaults to None.</p> <code>None</code> <code>labels</code> <code>list</code> <p>A list of labels to use for the legend. Defaults to None.</p> <code>None</code> <code>scheme</code> <code>str</code> <p>Name of a choropleth classification scheme (requires mapclassify). Name of a choropleth classification scheme (requires mapclassify). A mapclassify.MapClassifier object will be used under the hood. Supported are all schemes provided by mapclassify (e.g. 'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled', 'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced', 'JenksCaspallSampled', 'MaxP', 'MaximumBreaks', 'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean', 'UserDefined'). Arguments can be passed in classification_kwds.</p> <code>'Quantiles'</code> <code>k</code> <code>int</code> <p>Number of classes (ignored if scheme is None or if column is categorical). Default to 5.</p> <code>5</code> <code>add_legend</code> <code>bool</code> <p>Whether to add a legend to the map. Defaults to True.</p> <code>True</code> <code>legend_title</code> <code>str</code> <p>The title of the legend. Defaults to None.</p> <code>None</code> <code>legend_position</code> <code>str</code> <p>The position of the legend. Can be 'topleft', 'topright', 'bottomleft', or 'bottomright'. Defaults to 'bottomright'.</p> <code>'bottomright'</code> <code>legend_kwds</code> <code>dict</code> <p>Keyword arguments to pass to :func:<code>matplotlib.pyplot.legend</code> or <code>matplotlib.pyplot.colorbar</code>. Defaults to None. Keyword arguments to pass to :func:<code>matplotlib.pyplot.legend</code> or Additional accepted keywords when <code>scheme</code> is specified: fmt : string     A formatting specification for the bin edges of the classes in the     legend. For example, to have no decimals: <code>{\"fmt\": \"{:.0f}\"}</code>. labels : list-like     A list of legend labels to override the auto-generated labblels.     Needs to have the same number of elements as the number of     classes (<code>k</code>). interval : boolean (default False)     An option to control brackets from mapclassify legend.     If True, open/closed interval brackets are shown in the legend.</p> <code>None</code> <code>classification_kwds</code> <code>dict</code> <p>Keyword arguments to pass to mapclassify. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>The layer name to be used.. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>style</code> <code>dict</code> <p>A dictionary specifying the style to be used. Defaults to None. style is a dictionary of the following form:     style = {     \"stroke\": False,     \"color\": \"#ff0000\",     \"weight\": 1,     \"opacity\": 1,     \"fill\": True,     \"fillColor\": \"#ffffff\",     \"fillOpacity\": 1.0,     \"dashArray\": \"9\"     \"clickable\": True, }</p> <code>None</code> <code>hover_style</code> <code>dict</code> <p>Hover style dictionary. Defaults to {}. hover_style is a dictionary of the following form:     hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}</p> <code>None</code> <code>style_callback</code> <code>function</code> <p>Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None. style_callback is a function that takes the feature as argument and should return a dictionary of the following form: style_callback = lambda feat: {\"fillColor\": feat\"properties\"}</p> <code>None</code> <code>info_mode</code> <code>str</code> <p>Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".</p> <code>'on_hover'</code> <code>encoding</code> <code>str</code> <p>The encoding of the GeoJSON file. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the GeoJSON class, such as fields, which can be a list of column names to be included in the popup.</p> <code>{}</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_data(\n    self,\n    data,\n    column,\n    colors=None,\n    labels=None,\n    cmap=None,\n    scheme=\"Quantiles\",\n    k=5,\n    add_legend=True,\n    legend_title=None,\n    legend_position=\"bottomright\",\n    legend_kwds=None,\n    classification_kwds=None,\n    layer_name=\"Untitled\",\n    style=None,\n    hover_style=None,\n    style_callback=None,\n    marker_radius=10,\n    marker_args=None,\n    info_mode=\"on_hover\",\n    encoding=\"utf-8\",\n    **kwargs,\n):\n    \"\"\"Add vector data to the map with a variety of classification schemes.\n\n    Args:\n        data (str | pd.DataFrame | gpd.GeoDataFrame): The data to classify. It can be a filepath to a vector dataset, a pandas dataframe, or a geopandas geodataframe.\n        column (str): The column to classify.\n        cmap (str, optional): The name of a colormap recognized by matplotlib. Defaults to None.\n        colors (list, optional): A list of colors to use for the classification. Defaults to None.\n        labels (list, optional): A list of labels to use for the legend. Defaults to None.\n        scheme (str, optional): Name of a choropleth classification scheme (requires mapclassify).\n            Name of a choropleth classification scheme (requires mapclassify).\n            A mapclassify.MapClassifier object will be used\n            under the hood. Supported are all schemes provided by mapclassify (e.g.\n            'BoxPlot', 'EqualInterval', 'FisherJenks', 'FisherJenksSampled',\n            'HeadTailBreaks', 'JenksCaspall', 'JenksCaspallForced',\n            'JenksCaspallSampled', 'MaxP', 'MaximumBreaks',\n            'NaturalBreaks', 'Quantiles', 'Percentiles', 'StdMean',\n            'UserDefined'). Arguments can be passed in classification_kwds.\n        k (int, optional): Number of classes (ignored if scheme is None or if column is categorical). Default to 5.\n        add_legend (bool, optional): Whether to add a legend to the map. Defaults to True.\n        legend_title (str, optional): The title of the legend. Defaults to None.\n        legend_position (str, optional): The position of the legend. Can be 'topleft', 'topright', 'bottomleft', or 'bottomright'. Defaults to 'bottomright'.\n        legend_kwds (dict, optional): Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or `matplotlib.pyplot.colorbar`. Defaults to None.\n            Keyword arguments to pass to :func:`matplotlib.pyplot.legend` or\n            Additional accepted keywords when `scheme` is specified:\n            fmt : string\n                A formatting specification for the bin edges of the classes in the\n                legend. For example, to have no decimals: ``{\"fmt\": \"{:.0f}\"}``.\n            labels : list-like\n                A list of legend labels to override the auto-generated labblels.\n                Needs to have the same number of elements as the number of\n                classes (`k`).\n            interval : boolean (default False)\n                An option to control brackets from mapclassify legend.\n                If True, open/closed interval brackets are shown in the legend.\n        classification_kwds (dict, optional): Keyword arguments to pass to mapclassify. Defaults to None.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to None.\n            style is a dictionary of the following form:\n                style = {\n                \"stroke\": False,\n                \"color\": \"#ff0000\",\n                \"weight\": 1,\n                \"opacity\": 1,\n                \"fill\": True,\n                \"fillColor\": \"#ffffff\",\n                \"fillOpacity\": 1.0,\n                \"dashArray\": \"9\"\n                \"clickable\": True,\n            }\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n            hover_style is a dictionary of the following form:\n                hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n            style_callback is a function that takes the feature as argument and should return a dictionary of the following form:\n            style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n        encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n        **kwargs: Additional keyword arguments to pass to the GeoJSON class, such as fields, which can be a list of column names to be included in the popup.\n\n    \"\"\"\n\n    gdf, legend_dict = classify(\n        data=data,\n        column=column,\n        cmap=cmap,\n        colors=colors,\n        labels=labels,\n        scheme=scheme,\n        k=k,\n        legend_kwds=legend_kwds,\n        classification_kwds=classification_kwds,\n    )\n\n    if legend_title is None:\n        legend_title = column\n\n    if style is None:\n        style = {\n            # \"stroke\": False,\n            # \"color\": \"#ff0000\",\n            \"weight\": 1,\n            \"opacity\": 1,\n            # \"fill\": True,\n            # \"fillColor\": \"#ffffff\",\n            \"fillOpacity\": 1.0,\n            # \"dashArray\": \"9\"\n            # \"clickable\": True,\n        }\n        if colors is not None:\n            style[\"color\"] = \"#000000\"\n\n    if hover_style is None:\n        hover_style = {\"weight\": style[\"weight\"] + 1, \"fillOpacity\": 0.5}\n\n    if style_callback is None:\n        style_callback = lambda feat: {\"fillColor\": feat[\"properties\"][\"color\"]}\n\n    if gdf.geometry.geom_type.unique().tolist()[0] == \"Point\":\n        columns = gdf.columns.tolist()\n        if \"category\" in columns:\n            columns.remove(\"category\")\n        if \"color\" in columns:\n            columns.remove(\"color\")\n        if marker_args is None:\n            marker_args = {}\n        if \"fill_color\" not in marker_args:\n            marker_args[\"fill_color\"] = gdf[\"color\"].tolist()\n        if \"stroke\" not in marker_args:\n            marker_args[\"stroke\"] = False\n        if \"fill_opacity\" not in marker_args:\n            marker_args[\"fill_opacity\"] = 0.8\n\n        marker_args[\"radius\"] = marker_radius\n\n        self.add_markers(gdf[columns], layer_name=layer_name, **marker_args)\n    else:\n        self.add_gdf(\n            gdf,\n            layer_name=layer_name,\n            style=style,\n            hover_style=hover_style,\n            style_callback=style_callback,\n            info_mode=info_mode,\n            encoding=encoding,\n            **kwargs,\n        )\n    if add_legend:\n        self.add_legend(\n            title=legend_title, legend_dict=legend_dict, position=legend_position\n        )    \n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_gdf","title":"<code>add_gdf(self, gdf, layer_name='Untitled', style={}, hover_style={}, style_callback=None, fill_colors=['black'], info_mode='on_hover', zoom_to_layer=False, encoding='utf-8', **kwargs)</code>","text":"<p>Adds a GeoDataFrame to the map.</p> <p>Parameters:</p> Name Type Description Default <code>gdf</code> <code>GeoDataFrame</code> <p>A GeoPandas GeoDataFrame.</p> required <code>layer_name</code> <code>str</code> <p>The layer name to be used.. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>style</code> <code>dict</code> <p>A dictionary specifying the style to be used. Defaults to {}.</p> <code>{}</code> <code>hover_style</code> <code>dict</code> <p>Hover style dictionary. Defaults to {}.</p> <code>{}</code> <code>style_callback</code> <code>function</code> <p>Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.</p> <code>None</code> <code>fill_colors</code> <code>list</code> <p>The random colors to use for filling polygons. Defaults to [\"black\"].</p> <code>['black']</code> <code>info_mode</code> <code>str</code> <p>Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".</p> <code>'on_hover'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer. Defaults to False.</p> <code>False</code> <code>encoding</code> <code>str</code> <p>The encoding of the GeoDataFrame. Defaults to \"utf-8\".</p> <code>'utf-8'</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_gdf(\n    self,\n    gdf,\n    layer_name=\"Untitled\",\n    style={},\n    hover_style={},\n    style_callback=None,\n    fill_colors=[\"black\"],\n    info_mode=\"on_hover\",\n    zoom_to_layer=False,\n    encoding=\"utf-8\",\n    **kwargs,\n):\n    \"\"\"Adds a GeoDataFrame to the map.\n\n    Args:\n        gdf (GeoDataFrame): A GeoPandas GeoDataFrame.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n        fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n        zoom_to_layer (bool, optional): Whether to zoom to the layer. Defaults to False.\n        encoding (str, optional): The encoding of the GeoDataFrame. Defaults to \"utf-8\".\n    \"\"\"\n    for col in gdf.columns:\n        try:\n            if gdf[col].dtype in [\"datetime64[ns]\", \"datetime64[ns, UTC]\"]:\n                gdf[col] = gdf[col].astype(str)\n        except:\n            pass\n\n    data = gdf_to_geojson(gdf, epsg=\"4326\")\n\n    self.add_geojson(\n        data,\n        layer_name,\n        style,\n        hover_style,\n        style_callback,\n        fill_colors,\n        info_mode,\n        zoom_to_layer,\n        encoding,\n        **kwargs,\n    )\n\n    if zoom_to_layer:\n        import numpy as np\n\n        bounds = gdf.to_crs(epsg=\"4326\").bounds\n        west = np.min(bounds[\"minx\"])\n        south = np.min(bounds[\"miny\"])\n        east = np.max(bounds[\"maxx\"])\n        north = np.max(bounds[\"maxy\"])\n        self.fit_bounds([[south, east], [north, west]])\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_geojson","title":"<code>add_geojson(self, in_geojson, layer_name='Untitled', style={}, hover_style={}, style_callback=None, fill_colors=['black'], info_mode='on_hover', zoom_to_layer=False, encoding='utf-8', **kwargs)</code>","text":"<p>Adds a GeoJSON file to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_geojson</code> <code>str | dict</code> <p>The file path or http URL to the input GeoJSON or a dictionary containing the geojson.</p> required <code>layer_name</code> <code>str</code> <p>The layer name to be used.. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>style</code> <code>dict</code> <p>A dictionary specifying the style to be used. Defaults to {}.</p> <code>{}</code> <code>hover_style</code> <code>dict</code> <p>Hover style dictionary. Defaults to {}.</p> <code>{}</code> <code>style_callback</code> <code>function</code> <p>Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.</p> <code>None</code> <code>fill_colors</code> <code>list</code> <p>The random colors to use for filling polygons. Defaults to [\"black\"].</p> <code>['black']</code> <code>info_mode</code> <code>str</code> <p>Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".</p> <code>'on_hover'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer after adding it to the map. Defaults to False.</p> <code>False</code> <code>encoding</code> <code>str</code> <p>The encoding of the GeoJSON file. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>The provided GeoJSON file could not be found.</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_geojson(\n    self,\n    in_geojson,\n    layer_name=\"Untitled\",\n    style={},\n    hover_style={},\n    style_callback=None,\n    fill_colors=[\"black\"],\n    info_mode=\"on_hover\",\n    zoom_to_layer=False,\n    encoding=\"utf-8\",\n    **kwargs,\n):\n    \"\"\"Adds a GeoJSON file to the map.\n\n    Args:\n        in_geojson (str | dict): The file path or http URL to the input GeoJSON or a dictionary containing the geojson.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n        fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n        zoom_to_layer (bool, optional): Whether to zoom to the layer after adding it to the map. Defaults to False.\n        encoding (str, optional): The encoding of the GeoJSON file. Defaults to \"utf-8\".\n\n    Raises:\n        FileNotFoundError: The provided GeoJSON file could not be found.\n    \"\"\"\n    import json\n    import random\n    import requests\n\n    style_callback_only = False\n\n    if len(style) == 0 and style_callback is not None:\n        style_callback_only = True\n\n    try:\n        if isinstance(in_geojson, str):\n            if in_geojson.startswith(\"http\"):\n                if is_jupyterlite():\n                    import pyodide\n\n                    output = os.path.basename(in_geojson)\n\n                    output = os.path.abspath(output)\n                    obj = pyodide.http.open_url(in_geojson)\n                    with open(output, \"w\") as fd:\n                        shutil.copyfileobj(obj, fd)\n                    with open(output, \"r\") as fd:\n                        data = json.load(fd)\n                else:\n                    in_geojson = github_raw_url(in_geojson)\n                    data = requests.get(in_geojson).json()\n            else:\n                in_geojson = os.path.abspath(in_geojson)\n                if not os.path.exists(in_geojson):\n                    raise FileNotFoundError(\n                        \"The provided GeoJSON file could not be found.\"\n                    )\n\n                with open(in_geojson, encoding=encoding) as f:\n                    data = json.load(f)\n        elif isinstance(in_geojson, dict):\n            data = in_geojson\n        else:\n            raise TypeError(\"The input geojson must be a type of str or dict.\")\n    except Exception as e:\n        raise Exception(e)\n\n    geom_type = get_geometry_type(data)\n\n    if not style:\n        style = {\n            # \"stroke\": True,\n            \"color\": \"#3388ff\",\n            \"weight\": 2,\n            \"opacity\": 1,\n            \"fill\": True,\n            \"fillColor\": \"#3388ff\",\n            \"fillOpacity\": 0.2,\n            # \"dashArray\": \"9\"\n            # \"clickable\": True,\n        }\n\n        if geom_type in [\"LineString\", \"MultiLineString\"]:\n            style[\"fill\"] = False\n\n    elif \"weight\" not in style:\n        style[\"weight\"] = 1\n\n    if not hover_style:\n        hover_style = {\"weight\": style[\"weight\"] + 2, \"fillOpacity\": 0}\n\n    def random_color(feature):\n        return {\n            \"color\": \"black\",\n            \"fillColor\": random.choice(fill_colors),\n        }\n\n    toolbar_button = widgets.ToggleButton(\n        value=True,\n        tooltip=\"Toolbar\",\n        icon=\"info\",\n        layout=widgets.Layout(\n            width=\"28px\", height=\"28px\", padding=\"0px 0px 0px 4px\"\n        ),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        # button_style=\"primary\",\n        layout=widgets.Layout(\n            height=\"28px\", width=\"28px\", padding=\"0px 0px 0px 4px\"\n        ),\n    )\n\n    html = widgets.HTML()\n    html.layout.margin = \"0px 10px 0px 10px\"\n    html.layout.max_height = \"250px\"\n    html.layout.max_width = \"250px\"\n\n    output_widget = widgets.VBox(\n        [widgets.HBox([toolbar_button, close_button]), html]\n    )\n    info_control = ipyleaflet.WidgetControl(\n        widget=output_widget, position=\"bottomright\"\n    )\n\n    if info_mode in [\"on_hover\", \"on_click\"]:\n        self.add(info_control)\n\n    def toolbar_btn_click(change):\n        if change[\"new\"]:\n            close_button.value = False\n            output_widget.children = [\n                widgets.VBox([widgets.HBox([toolbar_button, close_button]), html])\n            ]\n        else:\n            output_widget.children = [widgets.HBox([toolbar_button, close_button])]\n\n    toolbar_button.observe(toolbar_btn_click, \"value\")\n\n    def close_btn_click(change):\n        if change[\"new\"]:\n            toolbar_button.value = False\n            if info_control in self.controls:\n                self.remove_control(info_control)\n            output_widget.close()\n\n    close_button.observe(close_btn_click, \"value\")\n\n    if \"fields\" in kwargs:\n        fields = kwargs[\"fields\"]\n        kwargs.pop(\"fields\")\n    else:\n        fields = None\n\n    def update_html(feature, fields=fields, **kwargs):\n        if fields is None:\n            fields = list(feature[\"properties\"].keys())\n            if \"style\" in fields:\n                fields.remove(\"style\")\n\n        value = [\n            \"&lt;b&gt;{}: &lt;/b&gt;{}&lt;br&gt;\".format(prop, feature[\"properties\"][prop])\n            for prop in fields\n        ]\n\n        value = \"\"\"{}\"\"\".format(\"\".join(value))\n        html.value = value\n\n    if style_callback is None:\n        style_callback = random_color\n\n    if style_callback_only:\n        geojson = ipyleaflet.GeoJSON(\n            data=data,\n            hover_style=hover_style,\n            style_callback=style_callback,\n            name=layer_name,\n        )\n    else:\n        geojson = ipyleaflet.GeoJSON(\n            data=data,\n            style=style,\n            hover_style=hover_style,\n            style_callback=style_callback,\n            name=layer_name,\n        )\n\n    if info_mode == \"on_hover\":\n        geojson.on_hover(update_html)\n    elif info_mode == \"on_click\":\n        geojson.on_click(update_html)\n\n    self.add(geojson)\n    self.geojson_layers.append(geojson)\n\n    if not hasattr(self, \"json_layer_dict\"):\n        self.json_layer_dict = {}\n\n    params = {\n        \"data\": geojson,\n        \"style\": style,\n        \"hover_style\": hover_style,\n        \"style_callback\": style_callback,\n    }\n    self.json_layer_dict[layer_name] = params\n\n    if zoom_to_layer:\n        try:\n            import numpy as np\n            import geopandas as gpd\n\n            gdf = gpd.GeoDataFrame.from_features(data)\n            if gdf.crs is None:\n                gdf.crs = \"EPSG:4326\"\n            bounds = gdf.to_crs(epsg=\"4326\").bounds\n            west = np.min(bounds[\"minx\"])\n            south = np.min(bounds[\"miny\"])\n            east = np.max(bounds[\"maxx\"])\n            north = np.max(bounds[\"maxy\"])\n            self.fit_bounds([[south, east], [north, west]])\n        except Exception as e:\n            print(e)\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image to add.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image as a list of tuples.</p> required <code>name</code> <code>str</code> <p>The name of the image overlay. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image to add.\n        bounds (list): The bounds of the image as a list of tuples.\n        name (str, optional): The name of the image overlay. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_legend","title":"<code>add_legend(self, title='Legend', legend_dict=None, labels=None, colors=None, position='bottomright', builtin_legend=None, layer_name=None, **kwargs)</code>","text":"<p>Adds a customized basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Title of the legend. Defaults to 'Legend'.</p> <code>'Legend'</code> <code>legend_dict</code> <code>dict</code> <p>A dictionary containing legend items as keys and color as values. If provided, legend_keys and legend_colors will be ignored. Defaults to None.</p> <code>None</code> <code>labels</code> <code>list</code> <p>A list of legend keys. Defaults to None.</p> <code>None</code> <code>colors</code> <code>list</code> <p>A list of legend colors. Defaults to None.</p> <code>None</code> <code>position</code> <code>str</code> <p>Position of the legend. Defaults to 'bottomright'.</p> <code>'bottomright'</code> <code>builtin_legend</code> <code>str</code> <p>Name of the builtin legend to add to the map. Defaults to None.</p> <code>None</code> <code>layer_name</code> <code>str</code> <p>Layer name of the legend to be associated with. Defaults to None.</p> <code>None</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_legend(\n    self,\n    title=\"Legend\",\n    legend_dict=None,\n    labels=None,\n    colors=None,\n    position=\"bottomright\",\n    builtin_legend=None,\n    layer_name=None,\n    **kwargs,\n):\n    \"\"\"Adds a customized basemap to the map.\n\n    Args:\n        title (str, optional): Title of the legend. Defaults to 'Legend'.\n        legend_dict (dict, optional): A dictionary containing legend items as keys and color as values. If provided, legend_keys and legend_colors will be ignored. Defaults to None.\n        labels (list, optional): A list of legend keys. Defaults to None.\n        colors (list, optional): A list of legend colors. Defaults to None.\n        position (str, optional): Position of the legend. Defaults to 'bottomright'.\n        builtin_legend (str, optional): Name of the builtin legend to add to the map. Defaults to None.\n        layer_name (str, optional): Layer name of the legend to be associated with. Defaults to None.\n\n    \"\"\"\n    import pkg_resources\n    from IPython.display import display\n\n    pkg_dir = os.path.dirname(\n        pkg_resources.resource_filename(\"leafmap\", \"leafmap.py\")\n    )\n    legend_template = os.path.join(pkg_dir, \"data/template/legend.html\")\n\n    if \"min_width\" not in kwargs.keys():\n        min_width = None\n    if \"max_width\" not in kwargs.keys():\n        max_width = None\n    else:\n        max_width = kwargs[\"max_width\"]\n    if \"min_height\" not in kwargs.keys():\n        min_height = None\n    else:\n        min_height = kwargs[\"min_height\"]\n    if \"max_height\" not in kwargs.keys():\n        max_height = None\n    else:\n        max_height = kwargs[\"max_height\"]\n    if \"height\" not in kwargs.keys():\n        height = None\n    else:\n        height = kwargs[\"height\"]\n    if \"width\" not in kwargs.keys():\n        width = None\n    else:\n        width = kwargs[\"width\"]\n\n    if width is None:\n        max_width = \"300px\"\n    if height is None:\n        max_height = \"400px\"\n\n    if not os.path.exists(legend_template):\n        print(\"The legend template does not exist.\")\n        return\n\n    if labels is not None:\n        if not isinstance(labels, list):\n            print(\"The legend keys must be a list.\")\n            return\n    else:\n        labels = [\"One\", \"Two\", \"Three\", \"Four\", \"etc\"]\n\n    if colors is not None:\n        if not isinstance(colors, list):\n            print(\"The legend colors must be a list.\")\n            return\n        elif all(isinstance(item, tuple) for item in colors):\n            try:\n                colors = [rgb_to_hex(x) for x in colors]\n            except Exception as e:\n                print(e)\n        elif all((item.startswith(\"#\") and len(item) == 7) for item in colors):\n            pass\n        elif all((len(item) == 6) for item in colors):\n            pass\n        else:\n            print(\"The legend colors must be a list of tuples.\")\n            return\n    else:\n        colors = [\n            \"#8DD3C7\",\n            \"#FFFFB3\",\n            \"#BEBADA\",\n            \"#FB8072\",\n            \"#80B1D3\",\n        ]\n\n    if len(labels) != len(colors):\n        print(\"The legend keys and values must be the same length.\")\n        return\n\n    allowed_builtin_legends = builtin_legends.keys()\n    if builtin_legend is not None:\n        if builtin_legend not in allowed_builtin_legends:\n            print(\n                \"The builtin legend must be one of the following: {}\".format(\n                    \", \".join(allowed_builtin_legends)\n                )\n            )\n            return\n        else:\n            legend_dict = builtin_legends[builtin_legend]\n            labels = list(legend_dict.keys())\n            colors = list(legend_dict.values())\n\n    if legend_dict is not None:\n        if not isinstance(legend_dict, dict):\n            print(\"The legend dict must be a dictionary.\")\n            return\n        else:\n            labels = list(legend_dict.keys())\n            colors = list(legend_dict.values())\n            if all(isinstance(item, tuple) for item in colors):\n                try:\n                    colors = [rgb_to_hex(x) for x in colors]\n                except Exception as e:\n                    print(e)\n\n    allowed_positions = [\n        \"topleft\",\n        \"topright\",\n        \"bottomleft\",\n        \"bottomright\",\n    ]\n    if position not in allowed_positions:\n        print(\n            \"The position must be one of the following: {}\".format(\n                \", \".join(allowed_positions)\n            )\n        )\n        return\n\n    header = []\n    content = []\n    footer = []\n\n    with open(legend_template) as f:\n        lines = f.readlines()\n        lines[3] = lines[3].replace(\"Legend\", title)\n        header = lines[:6]\n        footer = lines[11:]\n\n    for index, key in enumerate(labels):\n        color = colors[index]\n        if not color.startswith(\"#\"):\n            color = \"#\" + color\n        item = \"      &lt;li&gt;&lt;span style='background:{};'&gt;&lt;/span&gt;{}&lt;/li&gt;\\n\".format(\n            color, key\n        )\n        content.append(item)\n\n    legend_html = header + content + footer\n    legend_text = \"\".join(legend_html)\n\n    try:\n        legend_output_widget = widgets.Output(\n            layout={\n                # \"border\": \"1px solid black\",\n                \"max_width\": max_width,\n                \"min_width\": min_width,\n                \"max_height\": max_height,\n                \"min_height\": min_height,\n                \"height\": height,\n                \"width\": width,\n                \"overflow\": \"scroll\",\n            }\n        )\n        legend_control = ipyleaflet.WidgetControl(\n            widget=legend_output_widget, position=position\n        )\n        legend_widget = widgets.HTML(value=legend_text)\n        with legend_output_widget:\n            display(legend_widget)\n\n        self.legend_widget = legend_output_widget\n        self.legend_control = legend_control\n        self.add(legend_control)\n\n    except Exception as e:\n        raise Exception(e)\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity:', position='topright')</code>","text":"<p>Adds an opacity slider for the specified layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer for which to add the opacity slider.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity:\".</p> <code>'Opacity:'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity:\", position=\"topright\"):\n    \"\"\"Adds an opacity slider for the specified layer.\n\n    Args:\n        layer (object): The layer for which to add the opacity slider.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n    )\n\n    def update_opacity(change):\n        \"\"\"\n        Updates the opacity of a layer based on the new value from a slider.\n\n        This function is designed to be used as a callback for an ipywidgets slider. \n        It takes a dictionary with a \"new\" key representing the new value of the slider, \n        and sets the opacity of a global layer variable to this new value.\n\n        Args:\n        change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n        Returns:\n            None\n        \"\"\"\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n\n    from ipywidgets import Dropdown, Button, HBox\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_shp","title":"<code>add_shp(self, in_shp, layer_name='Untitled', style={}, hover_style={}, style_callback=None, fill_colors=['black'], info_mode='on_hover', zoom_to_layer=False, encoding='utf-8')</code>","text":"<p>Adds a shapefile to the map.</p> <p>Parameters:</p> Name Type Description Default <code>in_shp</code> <code>str</code> <p>The input file path or HTTP URL (*.zip) to the shapefile.</p> required <code>layer_name</code> <code>str</code> <p>The layer name to be used.. Defaults to \"Untitled\".</p> <code>'Untitled'</code> <code>style</code> <code>dict</code> <p>A dictionary specifying the style to be used. Defaults to {}.</p> <code>{}</code> <code>hover_style</code> <code>dict</code> <p>Hover style dictionary. Defaults to {}.</p> <code>{}</code> <code>style_callback</code> <code>function</code> <p>Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.</p> <code>None</code> <code>fill_colors</code> <code>list</code> <p>The random colors to use for filling polygons. Defaults to [\"black\"].</p> <code>['black']</code> <code>info_mode</code> <code>str</code> <p>Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".</p> <code>'on_hover'</code> <code>zoom_to_layer</code> <code>bool</code> <p>Whether to zoom to the layer after adding it to the map. Defaults to False.</p> <code>False</code> <code>encoding</code> <code>str</code> <p>The encoding of the shapefile. Defaults to \"utf-8\".</p> <code>'utf-8'</code> <p>Exceptions:</p> Type Description <code>FileNotFoundError</code> <p>The provided shapefile could not be found.</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_shp(\n    self,\n    in_shp,\n    layer_name=\"Untitled\",\n    style={},\n    hover_style={},\n    style_callback=None,\n    fill_colors=[\"black\"],\n    info_mode=\"on_hover\",\n    zoom_to_layer=False,\n    encoding=\"utf-8\",\n):\n    \"\"\"Adds a shapefile to the map.\n\n    Args:\n        in_shp (str): The input file path or HTTP URL (*.zip) to the shapefile.\n        layer_name (str, optional): The layer name to be used.. Defaults to \"Untitled\".\n        style (dict, optional): A dictionary specifying the style to be used. Defaults to {}.\n        hover_style (dict, optional): Hover style dictionary. Defaults to {}.\n        style_callback (function, optional): Styling function that is called for each feature, and should return the feature style. This styling function takes the feature as argument. Defaults to None.\n        fill_colors (list, optional): The random colors to use for filling polygons. Defaults to [\"black\"].\n        info_mode (str, optional): Displays the attributes by either on_hover or on_click. Any value other than \"on_hover\" or \"on_click\" will be treated as None. Defaults to \"on_hover\".\n        zoom_to_layer (bool, optional): Whether to zoom to the layer after adding it to the map. Defaults to False.\n        encoding (str, optional): The encoding of the shapefile. Defaults to \"utf-8\".\n\n    Raises:\n        FileNotFoundError: The provided shapefile could not be found.\n    \"\"\"\n\n    import glob\n\n    if in_shp.startswith(\"http\") and in_shp.endswith(\".zip\"):\n        out_dir = os.path.dirname(temp_file_path(\".shp\"))\n        if not os.path.exists(out_dir):\n            os.makedirs(out_dir)\n        basename = os.path.basename(in_shp)\n        filename = os.path.join(out_dir, basename)\n        download_file(in_shp, filename)\n        files = list(glob.glob(os.path.join(out_dir, \"*.shp\")))\n        if len(files) &gt; 0:\n            in_shp = files[0]\n        else:\n            raise FileNotFoundError(\n                \"The downloaded zip file does not contain any shapefile in the root directory.\"\n            )\n    else:\n        in_shp = os.path.abspath(in_shp)\n        if not os.path.exists(in_shp):\n            raise FileNotFoundError(\"The provided shapefile could not be found.\")\n\n    geojson = shp_to_geojson(in_shp, encoding=encoding)\n    self.add_geojson(\n        geojson,\n        layer_name,\n        style,\n        hover_style,\n        style_callback,\n        fill_colors,\n        info_mode,\n        zoom_to_layer,\n        encoding,\n    )\n\n\n\n    import geopandas as gpd\n    from ipyleaflet import GeoData\n    from shapely.geometry import Point, LineString\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_vector","title":"<code>add_vector(self, data)</code>","text":"<p>Add vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or geopandas.GeoDataFrame</code> <p>The vector data to add. This can be a file path or a GeoDataFrame.</p> required Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_vector(self, data):\n    \"\"\"\n    Add vector data to the map.\n\n    Args:\n        data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n    \"\"\"\n    import geopandas as gpd\n    from ipyleaflet import GeoData\n\n    if isinstance(data, gpd.GeoDataFrame):\n        vector_layer = GeoData(geo_dataframe=data)\n\n    elif isinstance(data, str):\n        vector_layer = GeoData(geo_dataframe=gpd.read_file(data))\n\n    else:\n        raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n    self.add_layer(vector_layer)\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to add.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geopypi/#geopypi.geopypi.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level:', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geopypi/geopypi.py</code> <pre><code>def add_zoom_slider(\n        self, description=\"Zoom level:\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install Geopypi, run this command in your terminal:</p> <pre><code>pip install Geopypi\n</code></pre> <p>This is the preferred method to install Geopypi, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install Geopypi from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Metaliguns77/Geopypi\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use Geopypi in a project:</p> <pre><code>import geopypi\n</code></pre>"},{"location":"examples/KH_Shakibul_Islam_lab4/","title":"KH Shakibul Islam lab4","text":"In\u00a0[1]: Copied! <pre>from datetime import datetime\n\nnow = datetime.now()\nprint(f\"Submitted time: {now}\")\n</pre> from datetime import datetime  now = datetime.now() print(f\"Submitted time: {now}\") <pre>Submitted time: 2024-02-29 18:23:58.699306\n</pre> In\u00a0[2]: Copied! <pre>name = \"Khandaker Shakibul Islam\"\n\nprint(f\"Hello,  {name} let's get started with JavaScript\")\n</pre> name = \"Khandaker Shakibul Islam\"  print(f\"Hello,  {name} let's get started with JavaScript\") <pre>Hello,  Khandaker Shakibul Islam let's get started with JavaScript\n</pre> In\u00a0[3]: Copied! <pre>name = \"Khandaker Shakibul Islam\"\nprint(name.upper() +\"\\n\"+ name.lower() +\"\\n\"+ name.title())\n</pre> name = \"Khandaker Shakibul Islam\" print(name.upper() +\"\\n\"+ name.lower() +\"\\n\"+ name.title())  <pre>KHANDAKER SHAKIBUL ISLAM\nkhandaker shakibul islam\nKhandaker Shakibul Islam\n</pre> In\u00a0[4]: Copied! <pre>Name = \"Franklin D. Roosevelt\"\nquote = \"The only thing we have to fear is fear itself\"\nprint(f\"{Name} said, \\\"{quote}\\\"\")\n</pre> Name = \"Franklin D. Roosevelt\" quote = \"The only thing we have to fear is fear itself\" print(f\"{Name} said, \\\"{quote}\\\"\") <pre>Franklin D. Roosevelt said, \"The only thing we have to fear is fear itself\"\n</pre> In\u00a0[5]: Copied! <pre>name = \"\\n\\t John Doe \\t\\n\"\n\nprint(f\"Name with whitespace: {name}\")\n\n\nprint(name.lstrip())\nprint(name.rstrip())\nprint(name.strip())\n</pre>  name = \"\\n\\t John Doe \\t\\n\"  print(f\"Name with whitespace: {name}\")   print(name.lstrip()) print(name.rstrip()) print(name.strip())  <pre>Name with whitespace: \n\t John Doe \t\n\nJohn Doe \t\n\n\n\t John Doe\nJohn Doe\n</pre> In\u00a0[6]: Copied! <pre>name = [\"Yinan Feng\", \"Seth Connor\", \"Andy Paul\", \"Sabiha Hoissain\"]\nprint(name[0])\nprint(name[1]) \nprint(name[2])\nprint(name[3])\n</pre> name = [\"Yinan Feng\", \"Seth Connor\", \"Andy Paul\", \"Sabiha Hoissain\"] print(name[0]) print(name[1])  print(name[2]) print(name[3]) <pre>Yinan Feng\nSeth Connor\nAndy Paul\nSabiha Hoissain\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre>Tansportation = [\"Car\", \"Bike\", \"Bus\", \"Train\"]\n\nprint(f\"I really like traveling by {Tansportation[3]}\")\n</pre> Tansportation = [\"Car\", \"Bike\", \"Bus\", \"Train\"]  print(f\"I really like traveling by {Tansportation[3]}\") <pre>I really like traveling by Train\n</pre> In\u00a0[8]: Copied! <pre>Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"]\nfor i in Pizza:\n    print(f\"I like {i} pizza\")\n</pre> Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"] for i in Pizza:     print(f\"I like {i} pizza\") <pre>I like Pepperoni pizza\nI like Cheese pizza\nI like Hawaiian pizza\nI like Meat Lovers pizza\n</pre> <p>Add a line at the end of your program, outside the for loop, that states how much you like pizza. The output should consist of three or more lines about the kinds of pizza you like and then an additional sentence, such as I really love pizza!</p> In\u00a0[9]: Copied! <pre>Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"]\nfor i in Pizza:\n    print(f\"I like {i} pizza\")\nprint(\"I really love pizza!\")\n</pre> Pizza = [\"Pepperoni\", \"Cheese\", \"Hawaiian\", \"Meat Lovers\"] for i in Pizza:     print(f\"I like {i} pizza\") print(\"I really love pizza!\") <pre>I like Pepperoni pizza\nI like Cheese pizza\nI like Hawaiian pizza\nI like Meat Lovers pizza\nI really love pizza!\n</pre> In\u00a0[10]: Copied! <pre>animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\"]\nfor i in animals:\n    print(f\"A {i} would make a great pet\")\n</pre> animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\"] for i in animals:     print(f\"A {i} would make a great pet\") <pre>A Dog would make a great pet\nA Cat would make a great pet\nA Bird would make a great pet\nA Fish would make a great pet\n</pre> <p>Add a line at the end of your program stating what these animals have in common. You could print a sentence such as Any of these animals would make a great pet!</p> In\u00a0[11]: Copied! <pre>animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Rabbit\"]\nfor i in animals:\n    print(f\"A {i} would make a great pet\")\nprint(\"Any of these animals are safe to have\")\n</pre> animals = [\"Dog\", \"Cat\", \"Bird\", \"Fish\", \"Rabbit\"] for i in animals:     print(f\"A {i} would make a great pet\") print(\"Any of these animals are safe to have\") <pre>A Dog would make a great pet\nA Cat would make a great pet\nA Bird would make a great pet\nA Fish would make a great pet\nA Rabbit would make a great pet\nAny of these animals are safe to have\n</pre> In\u00a0[12]: Copied! <pre>numbers = list(range(1, 101))\nprint(min(numbers))\nprint(max(numbers))\nprint(sum(numbers))\n</pre> numbers = list(range(1, 101)) print(min(numbers)) print(max(numbers)) print(sum(numbers))     <pre>1\n100\n5050\n</pre> In\u00a0[13]: Copied! <pre>for i in range(1, 21, 2):\n    print(i)\n</pre> for i in range(1, 21, 2):     print(i) <pre>1\n3\n5\n7\n9\n11\n13\n15\n17\n19\n</pre> In\u00a0[14]: Copied! <pre>list = list(range(3, 31, 3))\nfor i in list:\n    print(i)\n</pre> list = list(range(3, 31, 3)) for i in list:     print(i) <pre>3\n6\n9\n12\n15\n18\n21\n24\n27\n30\n</pre> In\u00a0[15]: Copied! <pre>cube =[i**3 for i in range(1, 11)]\ncube\n</pre> cube =[i**3 for i in range(1, 11)] cube      Out[15]: <pre>[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</pre> In\u00a0[16]: Copied! <pre>print(f\"The first three items in the list are: {animals[0:3]}\")\n</pre> print(f\"The first three items in the list are: {animals[0:3]}\") <pre>The first three items in the list are: ['Dog', 'Cat', 'Bird']\n</pre> <p>Print the message Three items from the middle of the list are:. Use a slice to print three items from the middle of the list.</p> In\u00a0[17]: Copied! <pre>print(f\"Three items from the middle of the list are: {animals[1:4]}\")\n</pre> print(f\"Three items from the middle of the list are: {animals[1:4]}\") <pre>Three items from the middle of the list are: ['Cat', 'Bird', 'Fish']\n</pre> <p>Print the message The last three items in the list are:. Use a slice to print the last three items in the list.</p> In\u00a0[18]: Copied! <pre>print(f\"Last three items in the list are: {animals[-3:]}\")\n</pre> print(f\"Last three items in the list are: {animals[-3:]}\") <pre>Last three items in the list are: ['Bird', 'Fish', 'Rabbit']\n</pre> In\u00a0[19]: Copied! <pre>buffet_foods = ('pizza', 'pasta', 'salad', 'soup', 'bread')\nfor food in buffet_foods:\n    print(food)\n</pre>  buffet_foods = ('pizza', 'pasta', 'salad', 'soup', 'bread') for food in buffet_foods:     print(food)  <pre>pizza\npasta\nsalad\nsoup\nbread\n</pre> <p>The restaurant changes its menu, replacing two of the items with different foods. Add a line that rewrites the tuple, and then use a for loop to print each of the items on the revised menu.</p> In\u00a0[20]: Copied! <pre>new_foods = (buffet_foods[:2] + (\"Roasted Chicken\", \"Fish &amp; Chips\") + buffet_foods[4:])\n\nfor food in new_foods:\n    print(food)\n</pre>   new_foods = (buffet_foods[:2] + (\"Roasted Chicken\", \"Fish &amp; Chips\") + buffet_foods[4:])  for food in new_foods:     print(food)  <pre>pizza\npasta\nRoasted Chicken\nFish &amp; Chips\nbread\n</pre> In\u00a0[21]: Copied! <pre>alien_color = \"green, yellow, red\"\nif alien_color == \"green\":\n    print(\"You just earned 5 points\")\nelse: \n    print()\n</pre> alien_color = \"green, yellow, red\" if alien_color == \"green\":     print(\"You just earned 5 points\") else:      print()  <pre>\n</pre> In\u00a0[22]: Copied! <pre>age = 26\nif age &lt; 2:\n    print(\"This person is a baby.\")\nelif 2 &lt; age &lt; 4:\n    print(\"This person is a toddler.\")\nelif 4 &lt; age &lt; 13:\n    print(\"This person is a kid.\")\nelif 13 &lt;age &lt; 20:\n    print(\"This person is a teenager.\")\nelif  20 &lt; age &lt; 65:\n    print(\"This person is an adult.\")\nelse:\n    print(\"This person is an elder.\")\n</pre> age = 26 if age &lt; 2:     print(\"This person is a baby.\") elif 2 &lt; age &lt; 4:     print(\"This person is a toddler.\") elif 4 &lt; age &lt; 13:     print(\"This person is a kid.\") elif 13  <pre>This person is an adult.\n</pre> In\u00a0[23]: Copied! <pre>fruits= ['mango', 'strawberry', 'kiwi']\n\n\nif 'bananas' in fruits:\n    print(\"You really like bananas!\")\nif 'mango' in fruits:\n    print(\"You really like mango!\")\nif 'strawberry' in fruits:\n    print(\"You really like strawberry!\")\nif 'kiwi' in fruits:\n    print(\"You really like kiwi!\")\nif 'apple' in fruits:\n    print(\"You really like apple!\")\n</pre>  fruits= ['mango', 'strawberry', 'kiwi']   if 'bananas' in fruits:     print(\"You really like bananas!\") if 'mango' in fruits:     print(\"You really like mango!\") if 'strawberry' in fruits:     print(\"You really like strawberry!\") if 'kiwi' in fruits:     print(\"You really like kiwi!\") if 'apple' in fruits:     print(\"You really like apple!\")   <pre>You really like mango!\nYou really like strawberry!\nYou really like kiwi!\n</pre> In\u00a0[24]: Copied! <pre>usernames = ['admin', 'shakib', 'akib', 'nishi', 'borno']\n\nfor i in usernames:\n    if i== 'admin':\n        print(\"Hello admin, would you like to see a status report?\")\n    else:\n        print(f\"Hello {i.title()}, thank you for logging in again.\")\n</pre>  usernames = ['admin', 'shakib', 'akib', 'nishi', 'borno']  for i in usernames:     if i== 'admin':         print(\"Hello admin, would you like to see a status report?\")     else:         print(f\"Hello {i.title()}, thank you for logging in again.\")  <pre>Hello admin, would you like to see a status report?\nHello Shakib, thank you for logging in again.\nHello Akib, thank you for logging in again.\nHello Nishi, thank you for logging in again.\nHello Borno, thank you for logging in again.\n</pre> In\u00a0[25]: Copied! <pre>current_users = ['admin', 'shakib', 'akib', 'nishi', 'borno']\n\n\nnew_users = ['shakib', 'nishi', 'andy', 'max', 'sabiha']\n\ncurrent_users_lower = [user.lower() for user in current_users]\n\nfor new_user in new_users:\n    if new_user.lower() in current_users_lower:\n        print(f\"The username {new_user} has already been used, you will need to enter a new username.\")\n    else:\n        print(f\"The username {new_user} is available.\")\n</pre>  current_users = ['admin', 'shakib', 'akib', 'nishi', 'borno']   new_users = ['shakib', 'nishi', 'andy', 'max', 'sabiha']  current_users_lower = [user.lower() for user in current_users]  for new_user in new_users:     if new_user.lower() in current_users_lower:         print(f\"The username {new_user} has already been used, you will need to enter a new username.\")     else:         print(f\"The username {new_user} is available.\")  <pre>The username shakib has already been used, you will need to enter a new username.\nThe username nishi has already been used, you will need to enter a new username.\nThe username andy is available.\nThe username max is available.\nThe username sabiha is available.\n</pre> In\u00a0[26]: Copied! <pre>list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfor number in list:\n    if number == 1:\n        ordinal = '1st'\n    elif number == 2:\n        ordinal = '2nd'\n    elif number == 3:\n        ordinal = '3rd'\n    else:\n        ordinal = str(number) + 'th'\n    print(ordinal)\n</pre> list = [1, 2, 3, 4, 5, 6, 7, 8, 9] for number in list:     if number == 1:         ordinal = '1st'     elif number == 2:         ordinal = '2nd'     elif number == 3:         ordinal = '3rd'     else:         ordinal = str(number) + 'th'     print(ordinal)  <pre>1st\n2nd\n3rd\n4th\n5th\n6th\n7th\n8th\n9th\n</pre>"},{"location":"examples/KH_Shakibul_Islam_lab4/#lab-4","title":"Lab 4\u00b6","text":""},{"location":"examples/KH_Shakibul_Islam_lab4/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab4</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-1","title":"Question 1\u00b6","text":"<p>Personal Message: Use a variable to represent a person\u2019s name, and print a message to that person. Your message should be simple, such as, \u201cHello Eric, would you like to learn some Python today?\u201d</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-2","title":"Question 2\u00b6","text":"<p>Name Cases: Use a variable to represent a person\u2019s name, and then print that person\u2019s name in lowercase, uppercase, and title case.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-3","title":"Question 3\u00b6","text":"<p>Famous Quote: Find a quote from a famous person you admire. Print the quote and the name of its author. Your output should look something like the following, including the quotation marks:</p> <pre><code>Albert Einstein once said, \u201cA person who never made a mistake never tried anything new.\u201d\n</code></pre>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-4","title":"Question 4\u00b6","text":"<p>Stripping Names: Use a variable to represent a person\u2019s name, and include some whitespace characters at the beginning and end of the name. Make sure you use each character combination, \"\\t\" and \"\\n\", at least once. Print the name once, so the whitespace around the name is displayed. Then print the name using each of the three stripping functions, lstrip(), rstrip(), and strip().</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-5","title":"Question 5\u00b6","text":"<p>Names: Store the names of a few of your friends in a list called names. Print each person\u2019s name by accessing each element in the list, one at a time.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-6","title":"Question 6\u00b6","text":"<p>Your Own List: Think of your favorite mode of transportation, such as a motorcycle or a car, and make a list that stores several examples. Use your list to print a series of statements about these items, such as \u201cI would like to own a Honda motorcycle.\u201d</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-7","title":"Question 7\u00b6","text":"<p>Pizzas: Think of at least three kinds of your favorite pizza. Store these pizza names in a list, and then use a for loop to print the name of each pizza.</p> <p>Modify your for loop to print a sentence using the name of the pizza instead of printing just the name of the pizza. For each pizza you should have one line of output containing a simple statement like I like pepperoni pizza.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-8","title":"Question 8\u00b6","text":"<p>Animals: Think of at least three different animals that have a common characteristic. Store the names of these animals in a list, and then use a for loop to print out the name of each animal.</p> <p>Modify your program to print a statement about each animal, such as A dog would make a great pet.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-9","title":"Question 9\u00b6","text":"<p>Summing a Hundred: Make a list of the numbers from one to one hundred, and then use <code>min()</code> and <code>max()</code> to make sure your list actually starts at one and ends at one hundred. Also, use the sum() function to see how quickly Python can add a hundred numbers.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-10","title":"Question 10\u00b6","text":"<p>Odd Numbers: Use the third argument of the <code>range()</code> function to make a list of the odd numbers from 1 to 20. Use a <code>for</code> loop to print each number.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-11","title":"Question 11\u00b6","text":"<p>Threes: Make a list of the multiples of 3 from 3 to 30. Use a <code>for</code> loop to print the numbers in your list.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-12","title":"Question 12\u00b6","text":"<p>Cube Comprehension: Use a list comprehension to generate a list of the first 10 cubes.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-13","title":"Question 13\u00b6","text":"<p>Slices: Using one of the programs you wrote in this lab, add several lines to the end of the program that do the following:</p> <p>Print the message The first three items in the list are:. Then use a slice to print the first three items from that program\u2019s list.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-14","title":"Question 14\u00b6","text":"<p>Buffet: A buffet-style restaurant offers only five basic foods. Think of five simple foods, and store them in a tuple.</p> <p>Use a for loop to print each food the restaurant offers.</p>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-15","title":"Question 15\u00b6","text":"<p>Alien Colors: Imagine an alien was just shot down in a game. Create a variable called <code>alien_color</code> and assign it a value of <code>green, yellow,</code> or <code>red</code>.</p> <ul> <li>Write an if statement to test whether the alien\u2019s color is green. If it is, print a message that the player just earned 5 points.</li> <li>Write one version of this program that passes the if test and another that fails. (The version that fails will have no output.)</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-16","title":"Question 16\u00b6","text":"<p>Stages of Life: Write an <code>if-elif-else</code> chain that determines a person\u2019s stage of life. Set a value for the variable <code>age</code>, and then:</p> <ul> <li>If the person is less than 2 years old, print a message that the person is a baby.</li> <li>If the person is at least 2 years old but less than 4, print a message that the person is a toddler.</li> <li>If the person is at least 4 years old but less than 13, print a message that the person is a kid.</li> <li>If the person is at least 13 years old but less than 20, print a message that the person is a teenager.</li> <li>If the person is at least 20 years old but less than 65, print a message that the person is an adult.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-17","title":"Question 17\u00b6","text":"<p>Favorite Fruit: Make a list of your favorite fruits, and then write a series of independent <code>if</code> statements that check for certain fruits in your list.</p> <ul> <li>Make a list of your three favorite fruits and call it favorite_fruits.</li> <li>Write five if statements. Each should check whether a certain kind of fruit is in your list. If the fruit is in your list, the if block should print a statement, such as You really like bananas!</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-18","title":"Question 18\u00b6","text":"<p>Hello Admin: Make a list of five or more usernames, including the name <code>admin</code>. Imagine you are writing code that will print a greeting to each user after they log in to a website. Loop through the list, and print a greeting to each user:</p> <ul> <li>If the username is 'admin', print a special greeting, such as Hello admin, would you like to see a status report?</li> <li>Otherwise, print a generic greeting, such as Hello Jaden, thank you for logging in again.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-19","title":"Question 19\u00b6","text":"<p>Checking Usernames: Do the following to create a program that simulates how websites ensure that everyone has a unique username.</p> <ul> <li>Make a list of five or more usernames called <code>current_users</code>.</li> <li>Make another list of five usernames called <code>new_users</code>. Make sure one or two of the new usernames are also in the <code>current_users</code> list.</li> <li>Loop through the <code>new_users</code> list to see if each new username has already been used. If it has, print a message that the person will need to enter a new username. If a username has not been used, print a message saying that the username is available.</li> <li>Make sure your comparison is case insensitive. If 'John' has been used, 'JOHN' should not be accepted. (To do this, you\u2019ll need to make a copy of <code>current_users</code> containing the lowercase versions of all existing users.)</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab4/#question-20","title":"Question 20\u00b6","text":"<p>Ordinal Numbers: Ordinal numbers indicate their position in a list, such as 1st or 2nd. Most ordinal numbers end in th, except 1, 2, and 3.</p> <ul> <li>Store the numbers 1 through 9 in a list.</li> <li>Loop through the list.</li> <li>Use an <code>if-elif-else</code> chain inside the loop to print the proper ordinal ending for each number. Your output should read \"1st 2nd 3rd 4th 5th 6th 7th 8th 9th\", and each result should be on a separate line.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab5/","title":"KH Shakibul Islam lab5","text":"In\u00a0[1]: Copied! <pre>person_info = {\n    'first_name': 'John',\n    'last_name': 'Conner',\n    'age': 28,\n    'city': 'New York'\n}\n\n\nprint(f\"First Name: {person_info['first_name']}\")\nprint(f\"Last Name: {person_info['last_name']}\")\nprint(f\"Age: {person_info['age']}\")\nprint(f\"City: {person_info['city']}\")\n</pre> person_info = {     'first_name': 'John',     'last_name': 'Conner',     'age': 28,     'city': 'New York' }   print(f\"First Name: {person_info['first_name']}\") print(f\"Last Name: {person_info['last_name']}\") print(f\"Age: {person_info['age']}\") print(f\"City: {person_info['city']}\") <pre>First Name: John\nLast Name: Conner\nAge: 28\nCity: New York\n</pre> In\u00a0[2]: Copied! <pre>numbers = {\n    'Borno': 7,\n    'Mou': 42,\n    'Tisha': 23,\n    'Jannatul': 8,\n    'Sumaya': 3\n}\n\nfor name, number in numbers.items():\n    print(f\"{name}'s favorite number is {number}.\")\n</pre> numbers = {     'Borno': 7,     'Mou': 42,     'Tisha': 23,     'Jannatul': 8,     'Sumaya': 3 }  for name, number in numbers.items():     print(f\"{name}'s favorite number is {number}.\") <pre>Borno's favorite number is 7.\nMou's favorite number is 42.\nTisha's favorite number is 23.\nJannatul's favorite number is 8.\nSumaya's favorite number is 3.\n</pre> In\u00a0[3]: Copied! <pre>glossary = {\n    'variable': 'A storage location paired with an associated symbolic name.',\n    'loop': 'A programming structure that repeats a sequence of instructions.',\n    'function': 'A block of organized, reusable code that is used to perform a single, related action.',\n    'dictionary': 'A collection of key-value pairs that maps an immutable key to a value.',\n    'list': 'An ordered collection of items which is changeable, allowing duplicate members.'\n}\n\n\nfor term, definition in glossary.items():\n    print(f\"{term.title()}:{definition}\\n\")\n</pre> glossary = {     'variable': 'A storage location paired with an associated symbolic name.',     'loop': 'A programming structure that repeats a sequence of instructions.',     'function': 'A block of organized, reusable code that is used to perform a single, related action.',     'dictionary': 'A collection of key-value pairs that maps an immutable key to a value.',     'list': 'An ordered collection of items which is changeable, allowing duplicate members.' }   for term, definition in glossary.items():     print(f\"{term.title()}:{definition}\\n\") <pre>Variable:A storage location paired with an associated symbolic name.\n\nLoop:A programming structure that repeats a sequence of instructions.\n\nFunction:A block of organized, reusable code that is used to perform a single, related action.\n\nDictionary:A collection of key-value pairs that maps an immutable key to a value.\n\nList:An ordered collection of items which is changeable, allowing duplicate members.\n\n</pre> In\u00a0[4]: Copied! <pre>glossary= {\n    'variable': 'A storage location paired with an associated symbolic name.',\n    'loop': 'A programming structure that repeats a sequence of instructions.',\n    'function': 'A block of organized, reusable code that is used to perform a single, related action.',\n    'dictionary': 'A collection of key-value pairs that maps an immutable key to a value.',\n    'list': 'An ordered collection of items which is changeable, allowing duplicate members.',\n    'tuple': 'An ordered collection of items which is unchangeable, allowing duplicate members.',\n    'set': 'An unordered collection of items that does not allow duplicate elements, useful for storing unique items.',\n    'conditional statement': 'A statement that is used to perform different actions based on different conditions, often expressed with if-else blocks.',\n    'comprehension': 'A concise way to create lists, dictionaries, sets, etc., using a single line of code.',\n    'module': 'A file containing Python definitions and statements. The file name is the module name with the suffix .py added.'\n}\n\nfor term, definition in glossary.items():\n    print(f\"{term.title()}:{definition}\\n\")\n</pre>  glossary= {     'variable': 'A storage location paired with an associated symbolic name.',     'loop': 'A programming structure that repeats a sequence of instructions.',     'function': 'A block of organized, reusable code that is used to perform a single, related action.',     'dictionary': 'A collection of key-value pairs that maps an immutable key to a value.',     'list': 'An ordered collection of items which is changeable, allowing duplicate members.',     'tuple': 'An ordered collection of items which is unchangeable, allowing duplicate members.',     'set': 'An unordered collection of items that does not allow duplicate elements, useful for storing unique items.',     'conditional statement': 'A statement that is used to perform different actions based on different conditions, often expressed with if-else blocks.',     'comprehension': 'A concise way to create lists, dictionaries, sets, etc., using a single line of code.',     'module': 'A file containing Python definitions and statements. The file name is the module name with the suffix .py added.' }  for term, definition in glossary.items():     print(f\"{term.title()}:{definition}\\n\")  <pre>Variable:A storage location paired with an associated symbolic name.\n\nLoop:A programming structure that repeats a sequence of instructions.\n\nFunction:A block of organized, reusable code that is used to perform a single, related action.\n\nDictionary:A collection of key-value pairs that maps an immutable key to a value.\n\nList:An ordered collection of items which is changeable, allowing duplicate members.\n\nTuple:An ordered collection of items which is unchangeable, allowing duplicate members.\n\nSet:An unordered collection of items that does not allow duplicate elements, useful for storing unique items.\n\nConditional Statement:A statement that is used to perform different actions based on different conditions, often expressed with if-else blocks.\n\nComprehension:A concise way to create lists, dictionaries, sets, etc., using a single line of code.\n\nModule:A file containing Python definitions and statements. The file name is the module name with the suffix .py added.\n\n</pre> In\u00a0[5]: Copied! <pre>rivers = {\n    'yellow river': 'china',\n    'brahmaputra': 'india',\n    'jamuna': 'bangladesh',\n}\n\n\nfor river, country in rivers.items():\n    print(f\"The {river.title()} runs through {country.title()}.\")\n\n\n\nprint(\"Rivers mentioned:\")\nfor river in rivers.keys():\n    print(f\"- {river.title()}\")\n\n\nprint(\"Countries mentioned:\")\nfor country in rivers.values():\n    print(f\"- {country.title()}\")\n</pre>  rivers = {     'yellow river': 'china',     'brahmaputra': 'india',     'jamuna': 'bangladesh', }   for river, country in rivers.items():     print(f\"The {river.title()} runs through {country.title()}.\")    print(\"Rivers mentioned:\") for river in rivers.keys():     print(f\"- {river.title()}\")   print(\"Countries mentioned:\") for country in rivers.values():     print(f\"- {country.title()}\")  <pre>The Yellow River runs through China.\nThe Brahmaputra runs through India.\nThe Jamuna runs through Bangladesh.\nRivers mentioned:\n- Yellow River\n- Brahmaputra\n- Jamuna\nCountries mentioned:\n- China\n- India\n- Bangladesh\n</pre> In\u00a0[6]: Copied! <pre>cities = {\n    'Dhaka': {\n        'country': 'Bangladesh',\n        'population': '11 million',\n        'fact': 'Dhaka is known for its traffic jam and masala curry food.'\n    },\n    'Paris': {\n        'country': 'France',\n        'population': '2.1 million',\n        'fact': 'Paris is famous for its art, fashion, gastronomy, and culture.'\n    },\n    'Cairo': {\n        'country': 'Egypt',\n        'population': '9.5 million',\n        'fact': 'Cairo is home to the nearest ancient wonders of the world, the Great Pyramids.'\n    }\n}\n\nfor city, info in cities.items():\n    print(f\"City: {city}\")\n    for key, value in info.items():\n        print(f\"{key.capitalize()}: {value}\")\n    print()\n</pre> cities = {     'Dhaka': {         'country': 'Bangladesh',         'population': '11 million',         'fact': 'Dhaka is known for its traffic jam and masala curry food.'     },     'Paris': {         'country': 'France',         'population': '2.1 million',         'fact': 'Paris is famous for its art, fashion, gastronomy, and culture.'     },     'Cairo': {         'country': 'Egypt',         'population': '9.5 million',         'fact': 'Cairo is home to the nearest ancient wonders of the world, the Great Pyramids.'     } }  for city, info in cities.items():     print(f\"City: {city}\")     for key, value in info.items():         print(f\"{key.capitalize()}: {value}\")     print() <pre>City: Dhaka\nCountry: Bangladesh\nPopulation: 11 million\nFact: Dhaka is known for its traffic jam and masala curry food.\n\nCity: Paris\nCountry: France\nPopulation: 2.1 million\nFact: Paris is famous for its art, fashion, gastronomy, and culture.\n\nCity: Cairo\nCountry: Egypt\nPopulation: 9.5 million\nFact: Cairo is home to the nearest ancient wonders of the world, the Great Pyramids.\n\n</pre> In\u00a0[7]: Copied! <pre>car_pref = input(\"What kind of rental car would you like? \")\n\nprint(f\"Let me see if I can find you a {car_pref}.\")\n</pre> car_pref = input(\"What kind of rental car would you like? \")  print(f\"Let me see if I can find you a {car_pref}.\") <pre>Let me see if I can find you a subaru.\n</pre> In\u00a0[8]: Copied! <pre>number_of_people = int(input(\"How many people are in your dinner group? \"))\n\nif number_of_people &gt; 8:\n    print(\"Sorry, you'll have to wait for a table.\")\nelse:\n    print(\"Your table is ready.\")\n</pre> number_of_people = int(input(\"How many people are in your dinner group? \"))  if number_of_people &gt; 8:     print(\"Sorry, you'll have to wait for a table.\") else:     print(\"Your table is ready.\") <pre>Sorry, you'll have to wait for a table.\n</pre> In\u00a0[9]: Copied! <pre>number = int(input(\"Please enter a number: \"))\n\nif number % 10 == 0:\n    print(f\"The number {number} is a multiple of 10.\")\nelse:\n    print(f\"The number {number} is not a multiple of 10.\")\n</pre> number = int(input(\"Please enter a number: \"))  if number % 10 == 0:     print(f\"The number {number} is a multiple of 10.\") else:     print(f\"The number {number} is not a multiple of 10.\") <pre>The number 56 is not a multiple of 10.\n</pre> In\u00a0[10]: Copied! <pre>pizza_toppings = []\n\nwhile True:\n    topping = input(\"Add this topping to your pizza: \")\n    \n    if topping == 'quit':\n        break\n    else:\n        print(f\"You'll add {topping} to your pizza.\")\n</pre> pizza_toppings = []  while True:     topping = input(\"Add this topping to your pizza: \")          if topping == 'quit':         break     else:         print(f\"You'll add {topping} to your pizza.\") <pre>You'll add beef  to your pizza.\nYou'll add banana to your pizza.\n</pre> In\u00a0[1]: Copied! <pre>def display_message():\n    \n    print(\"I'm learning  Python Packages in this chapter!\")\n\ndisplay_message()\n</pre> def display_message():          print(\"I'm learning  Python Packages in this chapter!\")  display_message() <pre>I'm learning  Python Packages in this chapter!\n</pre> In\u00a0[12]: Copied! <pre>def favorite_book(title):\n\n    print(f\"One of my favorite books is {title}.\")\n\nfavorite_book(\"It Wasn't About Slavery\")\n</pre> def favorite_book(title):      print(f\"One of my favorite books is {title}.\")  favorite_book(\"It Wasn't About Slavery\") <pre>One of my favorite books is It Wasn't About Slavery.\n</pre> In\u00a0[13]: Copied! <pre>def make_shirt(size, message):\n    \"\"\"Prints the size of the shirt and the message printed on it.\"\"\"\n    print(f\"Making a {size} t-shirt with the message: '{message}'\")\n\n\nmake_shirt('large', 'Python is Super!')\n\nmake_shirt(message='Code More, Worry Less', size='medium')\n</pre> def make_shirt(size, message):     \"\"\"Prints the size of the shirt and the message printed on it.\"\"\"     print(f\"Making a {size} t-shirt with the message: '{message}'\")   make_shirt('large', 'Python is Super!')  make_shirt(message='Code More, Worry Less', size='medium') <pre>Making a large t-shirt with the message: 'Python is Super!'\nMaking a medium t-shirt with the message: 'Code More, Worry Less'\n</pre> In\u00a0[14]: Copied! <pre>def make_shirt(size='large', message='I love Python'):\n    \"\"\"Prints the size of the shirt and the message printed on it, with defaults.\"\"\"\n    print(f\"Making a {size} t-shirt with the message: '{message}'\")\n\n\nmake_shirt()\n\n\nmake_shirt(size='medium')\n\nmake_shirt(size='small', message='Python is time consuming!')\n</pre> def make_shirt(size='large', message='I love Python'):     \"\"\"Prints the size of the shirt and the message printed on it, with defaults.\"\"\"     print(f\"Making a {size} t-shirt with the message: '{message}'\")   make_shirt()   make_shirt(size='medium')  make_shirt(size='small', message='Python is time consuming!')  <pre>Making a large t-shirt with the message: 'I love Python'\nMaking a medium t-shirt with the message: 'I love Python'\nMaking a small t-shirt with the message: 'Python is time consuming!'\n</pre> In\u00a0[1]: Copied! <pre>def describe_city(city, country='Iceland'):\n    print(f\"{city} is in {country}.\")\n\ndescribe_city('Reykjavik')\ndescribe_city('London', 'England')\ndescribe_city('Tokyo', 'Japan')\n</pre> def describe_city(city, country='Iceland'):     print(f\"{city} is in {country}.\")  describe_city('Reykjavik') describe_city('London', 'England') describe_city('Tokyo', 'Japan') <pre>Reykjavik is in Iceland.\nLondon is in England.\nTokyo is in Japan.\n</pre> In\u00a0[15]: Copied! <pre>def city_country(city, country):\n    return f\"{city}, {country}\"\n\nprint(city_country('Wilmington', 'Delaware'))\nprint(city_country('Knoxville', 'Tennessee'))\nprint(city_country('Dhaka', 'Bangladesh'))\n</pre> def city_country(city, country):     return f\"{city}, {country}\"  print(city_country('Wilmington', 'Delaware')) print(city_country('Knoxville', 'Tennessee')) print(city_country('Dhaka', 'Bangladesh')) <pre>Wilmington, Delaware\nKnoxville, Tennessee\nDhaka, Bangladesh\n</pre> In\u00a0[16]: Copied! <pre>def make_album(artist_name, album_title, number_of_songs=None):\n    album_dict = {\n        'artist': artist_name,\n        'title': album_title,\n    }\n    if number_of_songs:\n        album_dict['Tracks'] = number_of_songs\n    return album_dict\n\nalbum_1 = make_album('Motorhead', 'The King')\nalbum_2 = make_album('Breaking Benjamin', 'Diary of Jane')\nalbum_3 = make_album('Dead By April', 'Memory', number_of_songs=7)\n\nprint(album_1)\nprint(album_2)\nprint(album_3)\n</pre> def make_album(artist_name, album_title, number_of_songs=None):     album_dict = {         'artist': artist_name,         'title': album_title,     }     if number_of_songs:         album_dict['Tracks'] = number_of_songs     return album_dict  album_1 = make_album('Motorhead', 'The King') album_2 = make_album('Breaking Benjamin', 'Diary of Jane') album_3 = make_album('Dead By April', 'Memory', number_of_songs=7)  print(album_1) print(album_2) print(album_3) <pre>{'artist': 'Motorhead', 'title': 'The King'}\n{'artist': 'Breaking Benjamin', 'title': 'Diary of Jane'}\n{'artist': 'Dead By April', 'title': 'Memory', 'Tracks': 7}\n</pre> In\u00a0[17]: Copied! <pre>def make_album(artist_name, album_title):\n    album_dict = {\n        'artist': artist_name,\n        'title': album_title,\n    }\n    return album_dict\n\nwhile True:\n    \n    artist_name = input(\"Enter the Artist's name: \")\n    if artist_name == 'quit':\n        break\n    \n    album_title = input(\"Album title: \")\n    if album_title == 'quit':\n        break\n    \n    album = make_album(artist_name, album_title)\n    print(album)\n</pre> def make_album(artist_name, album_title):     album_dict = {         'artist': artist_name,         'title': album_title,     }     return album_dict  while True:          artist_name = input(\"Enter the Artist's name: \")     if artist_name == 'quit':         break          album_title = input(\"Album title: \")     if album_title == 'quit':         break          album = make_album(artist_name, album_title)     print(album) <pre>{'artist': 'tayor', 'title': 'red'}\n{'artist': 'breaking benjamin', 'title': 'diary of jane'}\n{'artist': 'john', 'title': 'contryroad'}\n</pre> In\u00a0[18]: Copied! <pre>def show_messages(messages):\n    \"\"\"Print each message in the list.\"\"\"\n    for message in messages:\n        print(message)\n\n\nmessages = [\n    'Hello, how are you?',\n    'Don\u2019t forget to bring your umbrella today!',\n    'Did you complete the Python assignment?',\n    'Good morning! Have a great day!',\n    'Can we meet for coffee tomorrow?'\n]\n\n\nshow_messages(messages)\n</pre> def show_messages(messages):     \"\"\"Print each message in the list.\"\"\"     for message in messages:         print(message)   messages = [     'Hello, how are you?',     'Don\u2019t forget to bring your umbrella today!',     'Did you complete the Python assignment?',     'Good morning! Have a great day!',     'Can we meet for coffee tomorrow?' ]   show_messages(messages) <pre>Hello, how are you?\nDon\u2019t forget to bring your umbrella today!\nDid you complete the Python assignment?\nGood morning! Have a great day!\nCan we meet for coffee tomorrow?\n</pre> In\u00a0[19]: Copied! <pre>def send_messages(messages, sent_messages):\n    while messages:\n        current_message = messages.pop(0)\n        print(f\"Sending message: {current_message}\")\n        sent_messages.append(current_message)\n\nmessages = [\n    \"Hello, how are you doing today?\",\n    \"Hows your wife!\",\n    \"Hope you will do well in this semester!\",\n    \"Bye, see you tomorrow!\",\n]\n\nsent_messages = []\n\nsend_messages(messages, sent_messages)\n\nprint(\"\\nFinal Lists:\")\nprint(\"Original Messages:\")\nfor message in messages:\n    print(message)\n\nprint(\"\\nSent Messages:\")\nfor sent_message in sent_messages:\n    print(sent_message)\n</pre> def send_messages(messages, sent_messages):     while messages:         current_message = messages.pop(0)         print(f\"Sending message: {current_message}\")         sent_messages.append(current_message)  messages = [     \"Hello, how are you doing today?\",     \"Hows your wife!\",     \"Hope you will do well in this semester!\",     \"Bye, see you tomorrow!\", ]  sent_messages = []  send_messages(messages, sent_messages)  print(\"\\nFinal Lists:\") print(\"Original Messages:\") for message in messages:     print(message)  print(\"\\nSent Messages:\") for sent_message in sent_messages:     print(sent_message) <pre>Sending message: Hello, how are you doing today?\nSending message: Hows your wife!\nSending message: Hope you will do well in this semester!\nSending message: Bye, see you tomorrow!\n\nFinal Lists:\nOriginal Messages:\n\nSent Messages:\nHello, how are you doing today?\nHows your wife!\nHope you will do well in this semester!\nBye, see you tomorrow!\n</pre> In\u00a0[20]: Copied! <pre>with open('learning_python.txt') as file_object:\n    contents = file_object.read()\nprint(\"Reading the entire file at once:\")\nprint(contents)\n\n\nprint(\"\\nLooping over the file object:\")\nwith open('learning_python.txt') as file_object:\n    for line in file_object:\n        print(line.rstrip())\n\n\nprint(\"\\nWorking with the lines outside the 'with' block:\")\nwith open('learning_python.txt') as file_object:\n    lines = file_object.readlines()\n\nfor line in lines:\n    print(line.rstrip())\n</pre> with open('learning_python.txt') as file_object:     contents = file_object.read() print(\"Reading the entire file at once:\") print(contents)   print(\"\\nLooping over the file object:\") with open('learning_python.txt') as file_object:     for line in file_object:         print(line.rstrip())   print(\"\\nWorking with the lines outside the 'with' block:\") with open('learning_python.txt') as file_object:     lines = file_object.readlines()  for line in lines:     print(line.rstrip()) <pre>Reading the entire file at once:\nIn Python, you can create variables to store information.\nIn Python, you can use loops to perform repetitive tasks efficiently.\nIn Python, you can use functions to organize your code into reusable blocks.\nIn Python, you can work with lists to store sequences of information.\nIn Python, you can use dictionaries to connect pieces of related information.\n\nLooping over the file object:\nIn Python, you can create variables to store information.\nIn Python, you can use loops to perform repetitive tasks efficiently.\nIn Python, you can use functions to organize your code into reusable blocks.\nIn Python, you can work with lists to store sequences of information.\nIn Python, you can use dictionaries to connect pieces of related information.\n\nWorking with the lines outside the 'with' block:\nIn Python, you can create variables to store information.\nIn Python, you can use loops to perform repetitive tasks efficiently.\nIn Python, you can use functions to organize your code into reusable blocks.\nIn Python, you can work with lists to store sequences of information.\nIn Python, you can use dictionaries to connect pieces of related information.\n</pre> In\u00a0[21]: Copied! <pre>with open('learning_python.txt', 'r') as file:\n    for line in file:\n        modified_line = line.replace('Python', 'JAVA')\n\nwith open('learning_python.txt', 'r') as file:\n    lines = file.readlines()\n\nprint(\"\\nReplaced Python with JAVA:\\n\")\nfor line in lines:\n    modified_line = line.replace('Python', 'JAVA')\n    print(modified_line.strip())\n</pre> with open('learning_python.txt', 'r') as file:     for line in file:         modified_line = line.replace('Python', 'JAVA')  with open('learning_python.txt', 'r') as file:     lines = file.readlines()  print(\"\\nReplaced Python with JAVA:\\n\") for line in lines:     modified_line = line.replace('Python', 'JAVA')     print(modified_line.strip()) <pre>\nReplaced Python with JAVA:\n\nIn JAVA, you can create variables to store information.\nIn JAVA, you can use loops to perform repetitive tasks efficiently.\nIn JAVA, you can use functions to organize your code into reusable blocks.\nIn JAVA, you can work with lists to store sequences of information.\nIn JAVA, you can use dictionaries to connect pieces of related information.\n</pre> In\u00a0[22]: Copied! <pre>name = input(\"Please enter your name: \")\n\nwith open('guest.txt', 'w') as file:\n    file.write(name)\n\nprint(f\"Hello, {name}! Your name has been written to guest.txt.\")\n</pre> name = input(\"Please enter your name: \")  with open('guest.txt', 'w') as file:     file.write(name)  print(f\"Hello, {name}! Your name has been written to guest.txt.\") <pre>Hello, metaliguns! Your name has been written to guest.txt.\n</pre> In\u00a0[23]: Copied! <pre>filename = 'guest_book.txt'\n\nwhile True:\n    name = input(\"Please enter your name (or type 'exit' to end): \")\n    \n    if name.lower() == 'exit':\n        print(\"\\nThank you for visiting!\")\n        break\n    \n    print(f\"Hello, {name}! Welcome to our guest book.\")\n    \n    with open('guest_book.txt', 'a') as file:\n        file.write(name + '\\n')\n    \n    print(\"Your visit has been recorded in the guest_book.txt\")\n</pre> filename = 'guest_book.txt'  while True:     name = input(\"Please enter your name (or type 'exit' to end): \")          if name.lower() == 'exit':         print(\"\\nThank you for visiting!\")         break          print(f\"Hello, {name}! Welcome to our guest book.\")          with open('guest_book.txt', 'a') as file:         file.write(name + '\\n')          print(\"Your visit has been recorded in the guest_book.txt\") <pre>Hello, shkaib! Welcome to our guest book.\nYour visit has been recorded in the guest_book.txt\nHello, akib! Welcome to our guest book.\nYour visit has been recorded in the guest_book.txt\nHello, nishi! Welcome to our guest book.\nYour visit has been recorded in the guest_book.txt\nHello, borno! Welcome to our guest book.\nYour visit has been recorded in the guest_book.txt\n\nThank you for visiting!\n</pre> In\u00a0[32]: Copied! <pre>filename = 'Programming_poll.txt'\n\nwhile True:\n    reason = input(\"Why do you like programming? (or type 'exit' to end): \")\n    \n    if reason.lower() == 'exit':\n        print(\"\\nThank you for sharing your reasons!\")\n        break\n    \n    with open('programming_poll_responses.txt', 'a') as file:\n        file.write(reason + '\\n')\n    \nprint(\"Programming poll responses have been saved to programming_poll_responses.txt.\")\n</pre> filename = 'Programming_poll.txt'  while True:     reason = input(\"Why do you like programming? (or type 'exit' to end): \")          if reason.lower() == 'exit':         print(\"\\nThank you for sharing your reasons!\")         break          with open('programming_poll_responses.txt', 'a') as file:         file.write(reason + '\\n')      print(\"Programming poll responses have been saved to programming_poll_responses.txt.\") <pre>\nThank you for sharing your reasons!\nProgramming poll responses have been saved to programming_poll_responses.txt.\n</pre> In\u00a0[2]: Copied! <pre>while True:\n    try:\n        number_1 = int(input(\"Enter the first number: \"))\n        number_2 = int(input(\"Enter the second number: \"))\n        \n        result = number_1 + number_2\n        print(f\"The sum of {number_1} and {number_2} is: {result}\")\n        break\n    except ValueError:\n        print(\"Error: Please enter valid numbers Here.\")\n</pre> while True:     try:         number_1 = int(input(\"Enter the first number: \"))         number_2 = int(input(\"Enter the second number: \"))                  result = number_1 + number_2         print(f\"The sum of {number_1} and {number_2} is: {result}\")         break     except ValueError:         print(\"Error: Please enter valid numbers Here.\")          <pre>Error: Please enter valid numbers Here.\nError: Please enter valid numbers Here.\nError: Please enter valid numbers Here.\nError: Please enter valid numbers Here.\nThe sum of 373 and 383 is: 756\n</pre> In\u00a0[25]: Copied! <pre>while True:\n    try:\n        \n        first_number = input(\"\\nEnter the first number: \")\n        if first_number.lower() == 'quit':\n            break  \n        first_number = float(first_number) \n\n        second_number = input(\"Enter the second number: \")\n        if second_number.lower() == 'quit':\n            break  \n        second_number = float(second_number) \n\n        result = first_number + second_number\n        print(f\"The result of adding {first_number} and {second_number} is {result}.\")\n\n    except ValueError:\n        \n        print(\"Oops! That was not a valid number. Please try again.\")\n</pre> while True:     try:                  first_number = input(\"\\nEnter the first number: \")         if first_number.lower() == 'quit':             break           first_number = float(first_number)           second_number = input(\"Enter the second number: \")         if second_number.lower() == 'quit':             break           second_number = float(second_number)           result = first_number + second_number         print(f\"The result of adding {first_number} and {second_number} is {result}.\")      except ValueError:                  print(\"Oops! That was not a valid number. Please try again.\") <pre>Oops! That was not a valid number. Please try again.\nThe result of adding 23.0 and 232.0 is 255.0.\nThe result of adding 23.0 and 8239.0 is 8262.0.\nThe result of adding 3223.0 and 23.0 is 3246.0.\n</pre> In\u00a0[26]: Copied! <pre>try:\n    with open('cats.txt', 'r') as cat_file:\n        print(\"Cat Names:\")\n        for line in cat_file:\n            print(line.strip())\n            \nexcept FileNotFoundError:\n    print(f\"cats.txt file not found. Check the file location\")\n\ntry:\n    with open('dogs.txt', 'r') as dog_file:\n        print(\"\\nDog Names:\")\n        for line in dog_file:\n            print(line.strip())\n\nexcept FileNotFoundError:\n    print(\"\\ndogs.txt file not found. Please check the file location.\")\n</pre> try:     with open('cats.txt', 'r') as cat_file:         print(\"Cat Names:\")         for line in cat_file:             print(line.strip())              except FileNotFoundError:     print(f\"cats.txt file not found. Check the file location\")  try:     with open('dogs.txt', 'r') as dog_file:         print(\"\\nDog Names:\")         for line in dog_file:             print(line.strip())  except FileNotFoundError:     print(\"\\ndogs.txt file not found. Please check the file location.\")  <pre>Cat Names:\nkitty\nmeni\nmewmew\n\ndogs.txt file not found. Please check the file location.\n</pre> In\u00a0[27]: Copied! <pre>try:\n    with open('cats.txt', 'r') as cat_file:\n        print(\"Cat Names:\")\n        for line in cat_file:\n            print(line.strip())\n            \nexcept FileNotFoundError:\n    print(f\"cats.txt file not found. Check the file location\")\n\ntry:\n    with open('dogs.txt', 'r') as dog_file:\n        print(\"\\nDog Names:\")\n        for line in dog_file:\n            print(line.strip())\n\nexcept FileNotFoundError:\n    print(\"\\ndogs.txt file not found. Please check the file location.\")\n</pre> try:     with open('cats.txt', 'r') as cat_file:         print(\"Cat Names:\")         for line in cat_file:             print(line.strip())              except FileNotFoundError:     print(f\"cats.txt file not found. Check the file location\")  try:     with open('dogs.txt', 'r') as dog_file:         print(\"\\nDog Names:\")         for line in dog_file:             print(line.strip())  except FileNotFoundError:     print(\"\\ndogs.txt file not found. Please check the file location.\") <pre>Cat Names:\nkitty\nmeni\nmewmew\n\ndogs.txt file not found. Please check the file location.\n</pre> In\u00a0[28]: Copied! <pre>try:   \n    with open('cats.txt', 'r') as cats_file:\n        cats_content = cats_file.read()\n        print(\"\\nContents of cats.txt:\")\n        print(cats_content)\n\nexcept FileNotFoundError:\n    pass\n\ntry:\n    with open('dogs.txt', 'r') as dogs_file:\n        dogs_content = dogs_file.read()\n        print(\"\\nContents of dogs.txt:\")\n        print(dogs_content)\n\nexcept FileNotFoundError:\n    pass\n</pre> try:        with open('cats.txt', 'r') as cats_file:         cats_content = cats_file.read()         print(\"\\nContents of cats.txt:\")         print(cats_content)  except FileNotFoundError:     pass  try:     with open('dogs.txt', 'r') as dogs_file:         dogs_content = dogs_file.read()         print(\"\\nContents of dogs.txt:\")         print(dogs_content)  except FileNotFoundError:     pass <pre>\nContents of cats.txt:\nkitty\nmeni\nmewmew\n</pre> In\u00a0[29]: Copied! <pre>line = \"Row, row, row your boat\"\nline.count(\"row\")\n</pre> line = \"Row, row, row your boat\" line.count(\"row\") Out[29]: <pre>2</pre> In\u00a0[30]: Copied! <pre>line.lower().count(\"row\")\n</pre> line.lower().count(\"row\") Out[30]: <pre>3</pre> <p>Notice that converting the string to lowercase using lower() catches all appearances of the word you\u2019re looking for, regardless of how it\u2019s formatted.</p> <p>Write a program that reads the files you found at Project Gutenberg and determines how many times the word <code>the</code> appears in each text. This will be an approximation because it will also count words such as <code>then</code> and <code>there</code>. Try counting <code>the</code>, with a space in the string, and see how much lower your count is.</p> In\u00a0[31]: Copied! <pre>import os\n\ndef count_the(file_path, word):\n    with open(file_path, 'r', encoding='utf-8') as file:\n        text = file.read().lower()\n        count_with_space = text.count(word)\n        count_without_space = text.count(word + ' ')\n        return count_with_space, count_without_space\n\ndef main():\n    file_path = r'D:\\spring 24\\software design\\labs\\lab5_book.txt'\n    word_to_search = 'the'\n\n    count_with_space, count_without_space = count_the(file_path, word_to_search)\n    print(f'File: lab5_book.txt')\n    print(f'Count of \"{word_to_search}\" with space: {count_with_space}')\n    print(f'Count of \"{word_to_search}\" without space: {count_without_space}')\n\nif __name__ == '__main__':\n    main()\n</pre> import os  def count_the(file_path, word):     with open(file_path, 'r', encoding='utf-8') as file:         text = file.read().lower()         count_with_space = text.count(word)         count_without_space = text.count(word + ' ')         return count_with_space, count_without_space  def main():     file_path = r'D:\\spring 24\\software design\\labs\\lab5_book.txt'     word_to_search = 'the'      count_with_space, count_without_space = count_the(file_path, word_to_search)     print(f'File: lab5_book.txt')     print(f'Count of \"{word_to_search}\" with space: {count_with_space}')     print(f'Count of \"{word_to_search}\" without space: {count_without_space}')  if __name__ == '__main__':     main() <pre>File: lab5_book.txt\nCount of \"the\" with space: 1496\nCount of \"the\" without space: 893\n</pre>"},{"location":"examples/KH_Shakibul_Islam_lab5/#lab-5","title":"Lab 5\u00b6","text":""},{"location":"examples/KH_Shakibul_Islam_lab5/#submission-instructions","title":"Submission instructions\u00b6","text":"<ol> <li>Download the notebook from https://geohey.gishub.org/labs/lab5</li> <li>Complete the lab questions</li> <li>Restart Kernel and Run All Cells</li> <li>Upload the notebook to your GitHub repository</li> <li>Make sure the notebook has an <code>Open In Colab</code> badge. Click on the badge to make sure your notebook can be opened in Colab.</li> <li>Submit the link to the notebook on your GitHub repository to Canvas</li> </ol>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-1","title":"Question 1\u00b6","text":"<p>Person: Use a dictionary to store information about a person you know. Store their first name, last name, age, and the city in which they live. You should have keys such as first_name, last_name, age, and city. Print each piece of information stored in your dictionary.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-2","title":"Question 2\u00b6","text":"<p>Favorite Numbers: Use a dictionary to store people\u2019s favorite numbers. Think of five names, and use them as keys in your dictionary. Think of a favorite number for each person, and store each as a value in your dictionary. Print each person\u2019s name and their favorite number. For even more fun, poll a few friends and get some actual data for your program.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-3","title":"Question 3\u00b6","text":"<p>Glossary: A Python dictionary can be used to model an actual dictionary. However, to avoid confusion, let\u2019s call it a glossary.</p> <ul> <li>Think of five programming words you\u2019ve learned about in the previous chapters. Use these words as the keys in your glossary, and store their meanings as values.</li> <li>Print each word and its meaning as neatly formatted output. You might print the word followed by a colon and then its meaning, or print the word on one line and then print its meaning indented on a second line. Use the newline character (\\n) to insert a blank line between each word-meaning pair in your output.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-4","title":"Question 4\u00b6","text":"<p>Glossary 2: Now that you know how to loop through a dictionary, clean up the code from Question 3 by replacing your series of print() calls with a loop that runs through the dictionary\u2019s keys and values. When you\u2019re sure that your loop works, add five more Python terms to your glossary. When you run your program again, these new words and meanings should automatically be included in the output.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-5","title":"Question 5\u00b6","text":"<p>Rivers: Make a dictionary containing three major rivers and the country each river runs through. One key-value pair might be 'nile': 'egypt'.</p> <ul> <li>Use a loop to print a sentence about each river, such as The Nile runs through Egypt.</li> <li>Use a loop to print the name of each river included in the dictionary.</li> <li>Use a loop to print the name of each country included in the dictionary.</li> </ul>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-6","title":"Question 6\u00b6","text":"<p>Cities: Make a dictionary called <code>cities</code>. Use the names of three cities as keys in your dictionary. Create a dictionary of information about each city and include the country that the city is in, its approximate population, and one fact about that city. The keys for each city\u2019s dictionary should be something like <code>country</code>, <code>population</code>, and <code>fact</code>. Print the name of each city and all of the information you have stored about it.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-7","title":"Question 7\u00b6","text":"<p>Rental Car: Write a program that asks the user what kind of rental car they would like. Print a message about that car, such as \u201cLet me see if I can find you a Subaru.\u201d</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-8","title":"Question 8\u00b6","text":"<p>Restaurant Seating: Write a program that asks the user how many people are in their dinner group. If the answer is more than eight, print a message saying they\u2019ll have to wait for a table. Otherwise, report that their table is ready.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-9","title":"Question 9\u00b6","text":"<p>Multiples of Ten: Ask the user for a number, and then report whether the number is a multiple of 10 or not.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-10","title":"Question 10\u00b6","text":"<p>Pizza Toppings: Write a loop that prompts the user to enter a series of pizza toppings until they enter a 'quit' value. As they enter each topping, print a message saying you\u2019ll add that topping to their pizza.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-11","title":"Question 11\u00b6","text":"<p>Message: Write a function called <code>display_message()</code> that prints one sentence telling everyone what you are learning about in this chapter. Call the function, and make sure the message displays correctly.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-12","title":"Question 12\u00b6","text":"<p>Favorite Book: Write a function called <code>favorite_book()</code> that accepts one parameter, title. The function should print a message, such as <code>One of my favorite books is Alice in Wonderland</code>. Call the function, making sure to include a book title as an argument in the function call.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-13","title":"Question 13\u00b6","text":"<p>T-Shirt: Write a function called <code>make_shirt()</code> that accepts a size and the text of a message that should be printed on the shirt. The function should print a sentence summarizing the size of the shirt and the message printed on it.</p> <p>Call the function once using positional arguments to make a shirt. Call the function a second time using keyword arguments.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-14","title":"Question 14\u00b6","text":"<p>Large Shirts: Modify the <code>make_shirt()</code> function so that shirts are large by default with a message that reads I love Python. Make a large shirt and a medium shirt with the default message, and a shirt of any size with a different message.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-15","title":"Question 15\u00b6","text":"<p>Cities: Write a function called <code>describe_city()</code> that accepts the name of a city and its country. The function should print a simple sentence, such as <code>Reykjavik is in Iceland</code>. Give the parameter for the country a default value. Call your function for three different cities, at least one of which is not in the default country.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-16","title":"Question 16\u00b6","text":"<p>City Names: Write a function called <code>city_country()</code> that takes in the name of a city and its country. The function should return a string formatted like this:</p> <pre>Santiago, Chile\n</pre> <p>Call your function with at least three city-country pairs, and print the values that are returned.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-17","title":"Question 17\u00b6","text":"<p>Album: Write a function called <code>make_album()</code> that builds a dictionary describing a music album. The function should take in an artist name and an album title, and it should return a dictionary containing these two pieces of information. Use the function to make three dictionaries representing different albums. Print each return value to show that the dictionaries are storing the album information correctly.</p> <p>Use None to add an optional parameter to make_album() that allows you to store the number of songs on an album. If the calling line includes a value for the number of songs, add that value to the album\u2019s dictionary. Make at least one new function call that includes the number of songs on an album.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-18","title":"Question 18\u00b6","text":"<p>User Albums: Start with your program from Question 17. Write a <code>while</code> loop that allows users to enter an album\u2019s artist and title. Once you have that information, call <code>make_album()</code> with the user\u2019s input and print the dictionary that\u2019s created. Be sure to include a quit value in the <code>while</code> loop.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-19","title":"Question 19\u00b6","text":"<p>Messages: Make a list containing a series of short text messages. Pass the list to a function called <code>show_messages()</code>, which prints each text message.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-20","title":"Question 20\u00b6","text":"<p>Sending Messages: Start with a copy of your program from Question 19. Write a function called <code>send_messages()</code> that prints each text message and moves each message to a new list called <code>sent_messages</code> as it\u2019s printed. After calling the function, print both of your lists to make sure the messages were moved correctly.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-21","title":"Question 21\u00b6","text":"<p>Learning Python: Open a blank file in your text editor and write a few lines summarizing what you\u2019ve learned about Python so far. Start each line with the phrase In Python you can. . .. Save the file as learning_python.txt in the same directory as your exercises from this chapter. Write a program that reads the file and prints what you wrote three times. Print the contents once by reading in the entire file, once by looping over the file object, and once by storing the lines in a list and then working with them outside the with block.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-22","title":"Question 22\u00b6","text":"<p>Learning C: You can use the replace() method to replace any word in a string with a different word. Here\u2019s a quick example showing how to replace 'dog' with 'cat' in a sentence:</p> <pre>message = \"I really like dogs.\"\nmessage.replace('dog', 'cat')\n'I really like cats.'\n</pre> <p>Read in each line from the file you just created, learning_python.txt, and replace the word Python with the name of another language, such as C. Print each modified line to the screen.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-23","title":"Question 23\u00b6","text":"<p>Guest: Write a program that prompts the user for their name. When they respond, write their name to a file called guest.txt.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-24","title":"Question 24\u00b6","text":"<p>Guest Book: Write a while loop that prompts users for their name. When they enter their name, print a greeting to the screen and add a line recording their visit in a file called guest_book.txt. Make sure each entry appears on a new line in the file.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-25","title":"Question 25\u00b6","text":"<p>Programming Poll: Write a while loop that asks people why they like programming. Each time someone enters a reason, add their reason to a file that stores all the responses.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-26","title":"Question 26\u00b6","text":"<p>Addition: One common problem when prompting for numerical input occurs when people provide text instead of numbers. When you try to convert the input to an int, you\u2019ll get a ValueError. Write a program that prompts for two numbers. Add them together and print the result. Catch the ValueError if either input value is not a number, and print a friendly error message. Test your program by entering two numbers and then by entering some text instead of a number.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-27","title":"Question 27\u00b6","text":"<p>Addition Calculator: Wrap your code from Question 26 in a while loop so the user can continue entering numbers even if they make a mistake and enter text instead of a number.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-28","title":"Question 28\u00b6","text":"<p>Cats and Dogs: Make two files, cats.txt and dogs.txt. Store at least three names of cats in the first file and three names of dogs in the second file. Write a program that tries to read these files and print the contents of the file to the screen. Wrap your code in a <code>try-except</code> block to catch the <code>FileNotFound</code> error, and print a friendly message if a file is missing. Move one of the files to a different location on your system, and make sure the code in the <code>except</code> block executes properly.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-29","title":"Question 29\u00b6","text":"<p>Silent Cats and Dogs: Modify your except block in Question 28 to fail silently if either file is missing.</p>"},{"location":"examples/KH_Shakibul_Islam_lab5/#question-30","title":"Question 30\u00b6","text":"<p>Common Words: Visit Project Gutenberg (https://gutenberg.org/) and find a few texts you\u2019d like to analyze. Download the text files for these works, or copy the raw text from your browser into a text file on your computer. You can use the <code>count()</code> method to find out how many times a word or phrase appears in a string. For example, the following code counts the number of times 'row' appears in a string:</p>"},{"location":"examples/KH_Shakibul_Islam_lab6/","title":"KH Shakibul Islam lab6","text":"In\u00a0[3]: Copied! <pre>import geopypi\nm = geopypi.Map()\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> import geopypi m = geopypi.Map() m.add_basemap(\"OpenTopoMap\") m Out[3]: <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[4]: Copied! <pre>!pip install geopypi\n</pre> !pip install geopypi <pre>Requirement already satisfied: geopypi in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (0.0.1)\nRequirement already satisfied: numpy in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopypi) (1.26.4)\nRequirement already satisfied: ipyleaflet in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopypi) (0.18.2)\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (8.1.2)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (2023.10.1)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (0.7.1)\nRequirement already satisfied: jinja2&gt;=3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from branca&gt;=0.5.0-&gt;ipyleaflet-&gt;geopypi) (3.1.3)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.1)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (8.21.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (5.14.1)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (4.0.10)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (3.0.10)\nRequirement already satisfied: decorator in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.19.1)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.1.6)\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (3.0.43)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.17.2)\nRequirement already satisfied: stack-data in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.6.3)\nRequirement already satisfied: colorama in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.4.6)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jinja2&gt;=3-&gt;branca&gt;=0.5.0-&gt;ipyleaflet-&gt;geopypi) (2.1.5)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.8.3)\nRequirement already satisfied: wcwidth in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.0.1)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.4.1)\nRequirement already satisfied: pure-eval in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.2)\nRequirement already satisfied: six&gt;=1.12.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from asttokens&gt;=2.1.0-&gt;stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (1.16.0)\n</pre>"},{"location":"examples/KH_Shakibul_Islam_lab6/#a-basic-python-package-for-cnn-networking-model","title":"A basic python package for CNN networking model\u00b6","text":""},{"location":"examples/codliver/","title":"Codliver","text":"In\u00a0[2]: Copied! <pre>import geopypi.common as geopypi\nurls = [\"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/State/GDB/NHD_H_District_of_Columbia_State_GDB.zip\"]\ngeopypi.download_files(urls, out_dir='.', unzip=True)\n</pre> import geopypi.common as geopypi urls = [\"https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/State/GDB/NHD_H_District_of_Columbia_State_GDB.zip\"] geopypi.download_files(urls, out_dir='.', unzip=True) <pre>Downloading...\nFrom: https://prd-tnm.s3.amazonaws.com/StagedProducts/Hydrography/NHD/State/GDB/NHD_H_District_of_Columbia_State_GDB.zip\nTo: d:\\spring 24\\software design\\Geopypi\\docs\\examples\\NHD_H_District_of_Columbia_State_GDB.zip\n100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 73.5M/73.5M [00:30&lt;00:00, 2.37MB/s]\n</pre> <pre>Extracting files...\n</pre> In\u00a0[3]: Copied! <pre>pip install lonboard\n</pre> pip install lonboard <pre>Requirement already satisfied: lonboard in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (0.8.0)\nRequirement already satisfied: anywidget&lt;0.10.0,&gt;=0.9.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (0.9.10)\nRequirement already satisfied: geopandas&gt;=0.13 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (0.14.3)\nRequirement already satisfied: matplotlib&lt;4.0,&gt;=3.7 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (3.8.3)\nRequirement already satisfied: palettable&lt;4.0.0,&gt;=3.3.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (3.3.3)\nRequirement already satisfied: pandas&lt;3,&gt;=2 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (2.2.1)\nRequirement already satisfied: pyarrow&gt;=14.0.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (15.0.2)\nRequirement already satisfied: shapely&lt;3,&gt;=2 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (2.0.3)\nRequirement already satisfied: typing-extensions&lt;5.0.0,&gt;=4.6.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from lonboard) (4.11.0)\nRequirement already satisfied: ipywidgets&gt;=7.6.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (8.1.2)\nRequirement already satisfied: psygnal&gt;=0.8.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.11.0)\nRequirement already satisfied: fiona&gt;=1.8.21 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas&gt;=0.13-&gt;lonboard) (1.9.6)\nRequirement already satisfied: packaging in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas&gt;=0.13-&gt;lonboard) (23.2)\nRequirement already satisfied: pyproj&gt;=3.3.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopandas&gt;=0.13-&gt;lonboard) (3.6.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (1.2.0)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (4.50.0)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (1.4.5)\nRequirement already satisfied: numpy&lt;2,&gt;=1.21 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (1.26.4)\nRequirement already satisfied: pillow&gt;=8 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (10.3.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (3.1.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from matplotlib&lt;4.0,&gt;=3.7-&gt;lonboard) (2.8.2)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from pandas&lt;3,&gt;=2-&gt;lonboard) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from pandas&lt;3,&gt;=2-&gt;lonboard) (2024.1)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (23.2.0)\nRequirement already satisfied: certifi in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (2024.2.2)\nRequirement already satisfied: click~=8.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (0.7.2)\nRequirement already satisfied: six in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (1.16.0)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.2.1)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (8.21.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (5.14.1)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (4.0.10)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (3.0.10)\nRequirement already satisfied: colorama in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from click~=8.0-&gt;fiona&gt;=1.8.21-&gt;geopandas&gt;=0.13-&gt;lonboard) (0.4.6)\nRequirement already satisfied: decorator in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.19.1)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.1.6)\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (3.0.42)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (2.17.2)\nRequirement already satisfied: stack-data in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.6.2)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.8.3)\nRequirement already satisfied: wcwidth in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (2.0.1)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (2.4.1)\nRequirement already satisfied: pure-eval in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&gt;=7.6.0-&gt;anywidget&lt;0.10.0,&gt;=0.9.0-&gt;lonboard) (0.2.2)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[2]: Copied! <pre>import geopypi.common as neo\nimport geopypi\nimport lonboard\n\nstate = \"DC\"   # Change to the US State of your choice\nurl = f\"https://data.source.coop/giswqs/nwi/wetlands/{state}_Wetlands.parquet\"\ngdf = neo.read_parquet(url, return_type='gdf', src_crs='EPSG:5070', dst_crs='EPSG:4326')\ngeopypi.view_vector(gdf, get_fill_color=[0, 0, 255, 128])\n</pre> import geopypi.common as neo import geopypi import lonboard  state = \"DC\"   # Change to the US State of your choice url = f\"https://data.source.coop/giswqs/nwi/wetlands/{state}_Wetlands.parquet\" gdf = neo.read_parquet(url, return_type='gdf', src_crs='EPSG:5070', dst_crs='EPSG:4326') geopypi.view_vector(gdf, get_fill_color=[0, 0, 255, 128]) <pre>name 'convert_coordinates' is not defined\n</pre> Out[2]: <pre>Map(layers=[SolidPolygonLayer(get_fill_color=[0, 0, 255, 128], table=pyarrow.Table\nATTRIBUTE: string\nWETLAND_T\u2026</pre> In\u00a0[3]: Copied! <pre>import duckdb\nimport plotly \ncon = duckdb.connect()\ncon.install_extension(\"spatial\")\ncon.load_extension(\"spatial\")\n</pre> import duckdb import plotly  con = duckdb.connect() con.install_extension(\"spatial\") con.load_extension(\"spatial\") In\u00a0[6]: Copied! <pre>count_df = con.sql(\n    f\"\"\"\nSELECT SUBSTRING(filename, LENGTH(filename) - 18, 2) AS State, COUNT(*) AS Count\nFROM read_parquet('s3://us-west-2.opendata.source.coop/giswqs/nwi/wetlands/*.parquet', filename=true)\nGROUP BY State\nORDER BY COUNT(*) DESC;\n\"\"\"\n).df()\ncount_df.head(10)\n</pre> count_df = con.sql(     f\"\"\" SELECT SUBSTRING(filename, LENGTH(filename) - 18, 2) AS State, COUNT(*) AS Count FROM read_parquet('s3://us-west-2.opendata.source.coop/giswqs/nwi/wetlands/*.parquet', filename=true) GROUP BY State ORDER BY COUNT(*) DESC; \"\"\" ).df() count_df.head(10) <pre>FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))</pre> Out[6]: State Count 0 MN 2674597 1 TX 2263259 2 ND 2077099 3 MT 1857721 4 WI 1718865 5 SD 1664305 6 AK 1649192 7 NE 1516060 8 MO 1262141 9 KS 1063234 In\u00a0[7]: Copied! <pre>con.sql(\"CREATE OR REPLACE TABLE wetlands AS FROM count_df\")\ncon.sql(\"FROM wetlands\")\n</pre> con.sql(\"CREATE OR REPLACE TABLE wetlands AS FROM count_df\") con.sql(\"FROM wetlands\") Out[7]: <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  State  \u2502  Count  \u2502\n\u2502 varchar \u2502  int64  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 MN      \u2502 2674597 \u2502\n\u2502 TX      \u2502 2263259 \u2502\n\u2502 ND      \u2502 2077099 \u2502\n\u2502 MT      \u2502 1857721 \u2502\n\u2502 WI      \u2502 1718865 \u2502\n\u2502 SD      \u2502 1664305 \u2502\n\u2502 AK      \u2502 1649192 \u2502\n\u2502 NE      \u2502 1516060 \u2502\n\u2502 MO      \u2502 1262141 \u2502\n\u2502 KS      \u2502 1063234 \u2502\n\u2502 \u00b7       \u2502     \u00b7   \u2502\n\u2502 \u00b7       \u2502     \u00b7   \u2502\n\u2502 \u00b7       \u2502     \u00b7   \u2502\n\u2502 NJ      \u2502  248702 \u2502\n\u2502 MD      \u2502  240320 \u2502\n\u2502 AZ      \u2502  189606 \u2502\n\u2502 CT      \u2502  170964 \u2502\n\u2502 VT      \u2502  164400 \u2502\n\u2502 WV      \u2502  154348 \u2502\n\u2502 DE      \u2502   78597 \u2502\n\u2502 RI      \u2502   55229 \u2502\n\u2502 HI      \u2502   13566 \u2502\n\u2502 DC      \u2502    1555 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502      51 rows      \u2502\n\u2502    (20 shown)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre> In\u00a0[8]: Copied! <pre>url = \"https://open.gishub.org/data/us/us_states.parquet\"\ncon.sql(\n    f\"\"\"\nCREATE OR REPLACE TABLE states AS\nSELECT * EXCLUDE geometry, ST_GeomFromWKB(geometry)\nAS geometry FROM '{url}'\n\"\"\"\n)\ncon.sql(\"FROM states\")\n</pre> url = \"https://open.gishub.org/data/us/us_states.parquet\" con.sql(     f\"\"\" CREATE OR REPLACE TABLE states AS SELECT * EXCLUDE geometry, ST_GeomFromWKB(geometry) AS geometry FROM '{url}' \"\"\" ) con.sql(\"FROM states\") Out[8]: <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   id    \u2502     name      \u2502                                          geometry                                          \u2502\n\u2502 varchar \u2502    varchar    \u2502                                          geometry                                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 AL      \u2502 Alabama       \u2502 POLYGON ((-87.359296 35.00118, -85.606675 34.984749, -85.431413 34.124869, -85.184951 32\u2026  \u2502\n\u2502 AK      \u2502 Alaska        \u2502 MULTIPOLYGON (((-131.602021 55.117982, -131.569159 55.28229, -131.355558 55.183705, -131\u2026  \u2502\n\u2502 AZ      \u2502 Arizona       \u2502 POLYGON ((-109.042503 37.000263, -109.04798 31.331629, -111.074448 31.331629, -112.24651\u2026  \u2502\n\u2502 AR      \u2502 Arkansas      \u2502 POLYGON ((-94.473842 36.501861, -90.152536 36.496384, -90.064905 36.304691, -90.218259 3\u2026  \u2502\n\u2502 CA      \u2502 California    \u2502 POLYGON ((-123.233256 42.006186, -122.378853 42.011663, -121.037003 41.995232, -120.0018\u2026  \u2502\n\u2502 CO      \u2502 Colorado      \u2502 POLYGON ((-107.919731 41.003906, -105.728954 40.998429, -104.053011 41.003906, -102.0539\u2026  \u2502\n\u2502 CT      \u2502 Connecticut   \u2502 POLYGON ((-73.053528 42.039048, -71.799309 42.022617, -71.799309 42.006186, -71.799309 4\u2026  \u2502\n\u2502 DE      \u2502 Delaware      \u2502 POLYGON ((-75.414089 39.804456, -75.507197 39.683964, -75.611259 39.61824, -75.589352 39\u2026  \u2502\n\u2502 FL      \u2502 Florida       \u2502 POLYGON ((-85.497137 30.997536, -85.004212 31.003013, -84.867289 30.712735, -83.498053 3\u2026  \u2502\n\u2502 GA      \u2502 Georgia       \u2502 POLYGON ((-83.109191 35.00118, -83.322791 34.787579, -83.339222 34.683517, -83.005129 34\u2026  \u2502\n\u2502 \u00b7       \u2502    \u00b7          \u2502                                             \u00b7                                              \u2502\n\u2502 \u00b7       \u2502    \u00b7          \u2502                                             \u00b7                                              \u2502\n\u2502 \u00b7       \u2502    \u00b7          \u2502                                             \u00b7                                              \u2502\n\u2502 SD      \u2502 South Dakota  \u2502 POLYGON ((-104.047534 45.944106, -96.560556 45.933153, -96.582464 45.818137, -96.856311 \u2026  \u2502\n\u2502 TN      \u2502 Tennessee     \u2502 POLYGON ((-88.054868 36.496384, -88.071299 36.677123, -87.852221 36.633308, -86.592525 3\u2026  \u2502\n\u2502 TX      \u2502 Texas         \u2502 POLYGON ((-101.812942 36.501861, -100.000075 36.501861, -100.000075 34.563024, -99.92339\u2026  \u2502\n\u2502 UT      \u2502 Utah          \u2502 POLYGON ((-112.164359 41.995232, -111.047063 42.000709, -111.047063 40.998429, -109.0479\u2026  \u2502\n\u2502 VT      \u2502 Vermont       \u2502 POLYGON ((-71.503554 45.013027, -71.4926 44.914442, -71.629524 44.750133, -71.536416 44.\u2026  \u2502\n\u2502 VA      \u2502 Virginia      \u2502 MULTIPOLYGON (((-75.397659 38.013497, -75.244304 38.029928, -75.375751 37.860142, -75.51\u2026  \u2502\n\u2502 WA      \u2502 Washington    \u2502 MULTIPOLYGON (((-117.033359 49.000239, -117.044313 47.762451, -117.038836 46.426077, -11\u2026  \u2502\n\u2502 WV      \u2502 West Virginia \u2502 POLYGON ((-80.518598 40.636951, -80.518598 39.722302, -79.477979 39.722302, -79.488933 3\u2026  \u2502\n\u2502 WI      \u2502 Wisconsin     \u2502 POLYGON ((-90.415429 46.568478, -90.229213 46.508231, -90.119674 46.338446, -89.09001 46\u2026  \u2502\n\u2502 WY      \u2502 Wyoming       \u2502 POLYGON ((-109.080842 45.002073, -105.91517 45.002073, -104.058488 44.996596, -104.05301\u2026  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 50 rows (20 shown)                                                                                         3 columns \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre> In\u00a0[9]: Copied! <pre>con.sql(\n    \"\"\"\nSELECT * FROM states INNER JOIN wetlands ON states.id = wetlands.State\n\"\"\"\n)\n</pre> con.sql(     \"\"\" SELECT * FROM states INNER JOIN wetlands ON states.id = wetlands.State \"\"\" ) Out[9]: <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   id    \u2502     name      \u2502                                geometry                                \u2502  State  \u2502  Count  \u2502\n\u2502 varchar \u2502    varchar    \u2502                                geometry                                \u2502 varchar \u2502  int64  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 MN      \u2502 Minnesota     \u2502 POLYGON ((-92.014696 46.705401, -92.091373 46.749217, -92.29402 46.6\u2026  \u2502 MN      \u2502 2674597 \u2502\n\u2502 TX      \u2502 Texas         \u2502 POLYGON ((-101.812942 36.501861, -100.000075 36.501861, -100.000075 \u2026  \u2502 TX      \u2502 2263259 \u2502\n\u2502 ND      \u2502 North Dakota  \u2502 POLYGON ((-97.228743 49.000239, -97.097296 48.682577, -97.16302 48.5\u2026  \u2502 ND      \u2502 2077099 \u2502\n\u2502 MT      \u2502 Montana       \u2502 POLYGON ((-104.047534 49.000239, -104.042057 47.861036, -104.047534 \u2026  \u2502 MT      \u2502 1857721 \u2502\n\u2502 WI      \u2502 Wisconsin     \u2502 POLYGON ((-90.415429 46.568478, -90.229213 46.508231, -90.119674 46.\u2026  \u2502 WI      \u2502 1718865 \u2502\n\u2502 SD      \u2502 South Dakota  \u2502 POLYGON ((-104.047534 45.944106, -96.560556 45.933153, -96.582464 45\u2026  \u2502 SD      \u2502 1664305 \u2502\n\u2502 AK      \u2502 Alaska        \u2502 MULTIPOLYGON (((-131.602021 55.117982, -131.569159 55.28229, -131.35\u2026  \u2502 AK      \u2502 1649192 \u2502\n\u2502 NE      \u2502 Nebraska      \u2502 POLYGON ((-103.324578 43.002989, -101.626726 42.997512, -98.499393 4\u2026  \u2502 NE      \u2502 1516060 \u2502\n\u2502 MO      \u2502 Missouri      \u2502 POLYGON ((-91.833957 40.609566, -91.729895 40.615043, -91.527248 40.\u2026  \u2502 MO      \u2502 1262141 \u2502\n\u2502 KS      \u2502 Kansas        \u2502 POLYGON ((-101.90605 40.001626, -95.306337 40.001626, -95.207752 39.\u2026  \u2502 KS      \u2502 1063234 \u2502\n\u2502 \u00b7       \u2502   \u00b7           \u2502                                   \u00b7                                    \u2502 \u00b7       \u2502     \u00b7   \u2502\n\u2502 \u00b7       \u2502   \u00b7           \u2502                                   \u00b7                                    \u2502 \u00b7       \u2502     \u00b7   \u2502\n\u2502 \u00b7       \u2502   \u00b7           \u2502                                   \u00b7                                    \u2502 \u00b7       \u2502     \u00b7   \u2502\n\u2502 NJ      \u2502 New Jersey    \u2502 POLYGON ((-74.236547 41.14083, -73.902454 40.998429, -74.022947 40.7\u2026  \u2502 NJ      \u2502  248702 \u2502\n\u2502 MD      \u2502 Maryland      \u2502 POLYGON ((-79.477979 39.722302, -75.786521 39.722302, -75.693413 38.\u2026  \u2502 MD      \u2502  240320 \u2502\n\u2502 AZ      \u2502 Arizona       \u2502 POLYGON ((-109.042503 37.000263, -109.04798 31.331629, -111.074448 3\u2026  \u2502 AZ      \u2502  189606 \u2502\n\u2502 CT      \u2502 Connecticut   \u2502 POLYGON ((-73.053528 42.039048, -71.799309 42.022617, -71.799309 42.\u2026  \u2502 CT      \u2502  170964 \u2502\n\u2502 VT      \u2502 Vermont       \u2502 POLYGON ((-71.503554 45.013027, -71.4926 44.914442, -71.629524 44.75\u2026  \u2502 VT      \u2502  164400 \u2502\n\u2502 WV      \u2502 West Virginia \u2502 POLYGON ((-80.518598 40.636951, -80.518598 39.722302, -79.477979 39.\u2026  \u2502 WV      \u2502  154348 \u2502\n\u2502 DE      \u2502 Delaware      \u2502 POLYGON ((-75.414089 39.804456, -75.507197 39.683964, -75.611259 39.\u2026  \u2502 DE      \u2502   78597 \u2502\n\u2502 RI      \u2502 Rhode Island  \u2502 MULTIPOLYGON (((-71.196845 41.67757, -71.120168 41.496831, -71.31733\u2026  \u2502 RI      \u2502   55229 \u2502\n\u2502 HI      \u2502 Hawaii        \u2502 MULTIPOLYGON (((-155.634835 18.948267, -155.881297 19.035898, -155.9\u2026  \u2502 HI      \u2502   13566 \u2502\n\u2502 MS      \u2502 Mississippi   \u2502 POLYGON ((-88.471115 34.995703, -88.202745 34.995703, -88.098683 34.\u2026  \u2502 MS      \u2502  611768 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 50 rows (20 shown)                                                                                         5 columns \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre> In\u00a0[10]: Copied! <pre>df = con.sql(\n    \"\"\"\nSELECT name, State, Count, ST_AsText(geometry) as geometry\nFROM states INNER JOIN wetlands ON states.id = wetlands.State\n\"\"\"\n).df()\ndf.head()\n</pre> df = con.sql(     \"\"\" SELECT name, State, Count, ST_AsText(geometry) as geometry FROM states INNER JOIN wetlands ON states.id = wetlands.State \"\"\" ).df() df.head() Out[10]: name State Count geometry 0 Minnesota MN 2674597 POLYGON ((-92.014696 46.705401, -92.091373 46.... 1 Texas TX 2263259 POLYGON ((-101.812942 36.501861, -100.000075 3... 2 North Dakota ND 2077099 POLYGON ((-97.228743 49.000239, -97.097296 48.... 3 Montana MT 1857721 POLYGON ((-104.047534 49.000239, -104.042057 4... 4 Wisconsin WI 1718865 POLYGON ((-90.415429 46.568478, -90.229213 46.... In\u00a0[11]: Copied! <pre>import geopypi.common as geopypi\ngdf = geopypi.df_to_gdf(df, src_crs=\"EPSG:4326\")\n</pre> import geopypi.common as geopypi gdf = geopypi.df_to_gdf(df, src_crs=\"EPSG:4326\") In\u00a0[12]: Copied! <pre>import geopypi\nm = geopypi.Map()\nm.add_data(\n    gdf, column='Count', scheme='Quantiles', cmap='Greens', legend_title='Wetland Count'\n)\nm\n</pre> import geopypi m = geopypi.Map() m.add_data(     gdf, column='Count', scheme='Quantiles', cmap='Greens', legend_title='Wetland Count' ) m Out[12]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[14]: Copied! <pre>import geopypi.plot as geopypi\n\ngeopypi.pie_chart(count_df, 'State', 'Count', height=800, title='Number of Wetlands by State')\n</pre> import geopypi.plot as geopypi  geopypi.pie_chart(count_df, 'State', 'Count', height=800, title='Number of Wetlands by State') In\u00a0[15]: Copied! <pre>geopypi.bar_chart(count_df, 'State', 'Count', title='Number of Wetlands by State')\n</pre> geopypi.bar_chart(count_df, 'State', 'Count', title='Number of Wetlands by State') In\u00a0[16]: Copied! <pre>con.sql(f\"\"\"\nSELECT SUM(Shape_Area) /  1000000 AS Area_SqKm\nFROM 's3://us-west-2.opendata.source.coop/giswqs/nwi/wetlands/*.parquet'\n\"\"\")\n</pre> con.sql(f\"\"\" SELECT SUM(Shape_Area) /  1000000 AS Area_SqKm FROM 's3://us-west-2.opendata.source.coop/giswqs/nwi/wetlands/*.parquet' \"\"\") <pre>FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))</pre> Out[16]: <pre>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Area_SqKm      \u2502\n\u2502       double       \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1442876.9096808706 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</pre> In\u00a0[17]: Copied! <pre>area_df = con.sql(f\"\"\"\nSELECT SUBSTRING(filename, LENGTH(filename) - 18, 2) AS State, SUM(Shape_Area) /  1000000 AS Area_SqKm\nFROM read_parquet('s3://us-west-2.opendata.source.coop/giswqs/nwi/wetlands/*.parquet', filename=true)\nGROUP BY State\nORDER BY COUNT(*) DESC;\n\"\"\").df()\narea_df.head(10)\n</pre> area_df = con.sql(f\"\"\" SELECT SUBSTRING(filename, LENGTH(filename) - 18, 2) AS State, SUM(Shape_Area) /  1000000 AS Area_SqKm FROM read_parquet('s3://us-west-2.opendata.source.coop/giswqs/nwi/wetlands/*.parquet', filename=true) GROUP BY State ORDER BY COUNT(*) DESC; \"\"\").df() area_df.head(10) <pre>FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))</pre> Out[17]: State Area_SqKm 0 MN 66376.803485 1 TX 43200.379897 2 ND 17586.222328 3 MT 13916.988281 4 WI 81781.779861 5 SD 14151.357901 6 AK 398576.219916 7 NE 7672.796780 8 MO 11283.318920 9 KS 5748.325735 In\u00a0[18]: Copied! <pre>geopypi.bar_chart(area_df, 'State', 'Area_SqKm', title='Wetland Area by State')\n</pre> geopypi.bar_chart(area_df, 'State', 'Area_SqKm', title='Wetland Area by State')"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[5]: Copied! <pre>import geopypi.foliumap as geopypi\n</pre> import geopypi.foliumap as geopypi In\u00a0[6]: Copied! <pre>m = geopypi.Map(center=[40, -100], zoom=4)\nurl = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\nm.add_raster(url, name=\"SRTM90\", opacity=0.5)\nm\n</pre> m = geopypi.Map(center=[40, -100], zoom=4) url = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" m.add_raster(url, name=\"SRTM90\", opacity=0.5) m Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[\u00a0]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!')"},{"location":"examples/ipywegets/","title":"Ipywegets","text":"In\u00a0[18]: Copied! <pre>!pip install geopypi\n</pre> !pip install geopypi <pre>Requirement already satisfied: geopypi in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (0.0.4)\nRequirement already satisfied: numpy in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopypi) (1.26.4)\nRequirement already satisfied: ipyleaflet in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopypi) (0.18.2)\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (8.1.2)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (2023.10.1)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (0.7.1)\nRequirement already satisfied: jinja2&gt;=3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from branca&gt;=0.5.0-&gt;ipyleaflet-&gt;geopypi) (3.1.3)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.1)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (8.21.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (5.14.1)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (4.0.10)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (3.0.10)\nRequirement already satisfied: decorator in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.19.1)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.1.6)\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (3.0.43)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.17.2)\nRequirement already satisfied: stack-data in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.6.3)\nRequirement already satisfied: colorama in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.4.6)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jinja2&gt;=3-&gt;branca&gt;=0.5.0-&gt;ipyleaflet-&gt;geopypi) (2.1.5)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.8.3)\nRequirement already satisfied: wcwidth in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.0.1)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.4.1)\nRequirement already satisfied: pure-eval in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.2)\nRequirement already satisfied: six&gt;=1.12.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from asttokens&gt;=2.1.0-&gt;stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (1.16.0)\n</pre> In\u00a0[10]: Copied! <pre>import geopypi\n</pre> import geopypi  In\u00a0[11]: Copied! <pre>m = geopypi.Map()\nm\n</pre> m = geopypi.Map() m Out[11]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[12]: Copied! <pre>m.add_basemap_gui()\nm\n</pre> m.add_basemap_gui() m Out[12]: <pre>Map(bottom=654.0, center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', \u2026</pre> In\u00a0[13]: Copied! <pre>m.add_zoom_slider()\n</pre> m.add_zoom_slider() In\u00a0[14]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[16]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[17]: Copied! <pre>with output_widget:\n    print(\"Created by Me\")\n</pre> with output_widget:     print(\"Created by Me\") In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/ipywegets/#adding-interactive-functionality-to-map","title":"Adding Interactive Functionality to Map\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[\u00a0]: Copied! <pre>pip install geopypi\n</pre> pip install geopypi  In\u00a0[1]: Copied! <pre>import geopypi\n</pre> import geopypi In\u00a0[4]: Copied! <pre>m = geopypi.Map()\nm.add_raster(r\"D:\\spring 24\\software design\\Libya-2023-07-01.tif\")\nm.add_zoom_slider()\nm\n</pre> m = geopypi.Map() m.add_raster(r\"D:\\spring 24\\software design\\Libya-2023-07-01.tif\") m.add_zoom_slider() m Out[4]: <pre>Map(center=[32.774843000000004, 22.6282785], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_\u2026</pre> In\u00a0[5]: Copied! <pre>m2 = geopypi.Map()\nm2.add_raster('https://github.com/opengeos/datasets/releases/download/raster/landsat.tif')\nm2\n</pre> m2 = geopypi.Map() m2.add_raster('https://github.com/opengeos/datasets/releases/download/raster/landsat.tif') m2 Out[5]: <pre>Map(center=[37.637848, -119.037106], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title\u2026</pre> In\u00a0[31]: Copied! <pre>m3 = geopypi.Map(center=(20, -115), zoom=3)\n\nurl = \"https://img.freepik.com/free-photo/fantastic-wonderland-forest-landscape-with-mushrooms-flowers-ai-generative_157027-1723.jpg?w=1800&amp;t=st=1712696724~exp=1712697324~hmac=caa3d01d60a54ea5b0581685029c69e254a2111477624bd4180f8be07f18d8ce\"\nbounds = ((10, -130), (24, -100))\nm3.add_image(url, bounds)\nm3\n</pre> m3 = geopypi.Map(center=(20, -115), zoom=3)  url = \"https://img.freepik.com/free-photo/fantastic-wonderland-forest-landscape-with-mushrooms-flowers-ai-generative_157027-1723.jpg?w=1800&amp;t=st=1712696724~exp=1712697324~hmac=caa3d01d60a54ea5b0581685029c69e254a2111477624bd4180f8be07f18d8ce\" bounds = ((10, -130), (24, -100)) m3.add_image(url, bounds) m3 Out[31]: <pre>Map(center=[20, -115], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre>"},{"location":"examples/raster/#add-a-raster-along-with-an-image-in-the-map","title":"Add a raster along with an image in the map\u00b6","text":""},{"location":"examples/raster/#using-local-file","title":"Using local file\u00b6","text":""},{"location":"examples/raster/#using-url","title":"using URL\u00b6","text":""},{"location":"examples/raster/#using-image","title":"using image\u00b6","text":""},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[7]: Copied! <pre>pip install geopypi\n</pre> pip install geopypi <pre>Requirement already satisfied: geopypi in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (0.0.1)\nRequirement already satisfied: numpy in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopypi) (1.26.4)\nRequirement already satisfied: ipyleaflet in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from geopypi) (0.18.2)\nRequirement already satisfied: ipywidgets&lt;9,&gt;=7.6.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (8.1.2)\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (0.2.1)\nRequirement already satisfied: xyzservices&gt;=2021.8.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (2023.10.1)\nRequirement already satisfied: branca&gt;=0.5.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipyleaflet-&gt;geopypi) (0.7.1)\nRequirement already satisfied: jinja2&gt;=3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from branca&gt;=0.5.0-&gt;ipyleaflet-&gt;geopypi) (3.1.3)\nRequirement already satisfied: comm&gt;=0.1.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.1)\nRequirement already satisfied: ipython&gt;=6.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (8.21.0)\nRequirement already satisfied: traitlets&gt;=4.3.1 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (5.14.1)\nRequirement already satisfied: widgetsnbextension~=4.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (4.0.10)\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (3.0.10)\nRequirement already satisfied: decorator in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (5.1.1)\nRequirement already satisfied: jedi&gt;=0.16 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.19.1)\nRequirement already satisfied: matplotlib-inline in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.1.6)\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (3.0.43)\nRequirement already satisfied: pygments&gt;=2.4.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.17.2)\nRequirement already satisfied: stack-data in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.6.3)\nRequirement already satisfied: colorama in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.4.6)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jinja2&gt;=3-&gt;branca&gt;=0.5.0-&gt;ipyleaflet-&gt;geopypi) (2.1.5)\nRequirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from jedi&gt;=0.16-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.8.3)\nRequirement already satisfied: wcwidth in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.13)\nRequirement already satisfied: executing&gt;=1.2.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.0.1)\nRequirement already satisfied: asttokens&gt;=2.1.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (2.4.1)\nRequirement already satisfied: pure-eval in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (0.2.2)\nRequirement already satisfied: six&gt;=1.12.0 in c:\\users\\shaki\\anaconda3\\envs\\geo\\lib\\site-packages (from asttokens&gt;=2.1.0-&gt;stack-data-&gt;ipython&gt;=6.1.0-&gt;ipywidgets&lt;9,&gt;=7.6.0-&gt;ipyleaflet-&gt;geopypi) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[8]: Copied! <pre>import geopypi\nm = geopypi.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_geojson(\"europe_110.geo.json\")\nm.add_layers_control()\nm\n</pre> import geopypi m = geopypi.Map() m.add_basemap(\"OpenTopoMap\") m.add_geojson(\"europe_110.geo.json\") m.add_layers_control() m Out[8]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[9]: Copied! <pre>m.add_vector('europe_110.geo.json')\nm\n</pre> m.add_vector('europe_110.geo.json') m Out[9]: <pre>Map(bottom=654.0, center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', \u2026</pre> In\u00a0[10]: Copied! <pre>m.add_shp(r\"D:\\spring 24\\software design\\AFG_adm\\AFG_adm2.shp\", name = \"afganistan\")\nm.add_layers_control()\nm\n</pre> m.add_shp(r\"D:\\spring 24\\software design\\AFG_adm\\AFG_adm2.shp\", name = \"afganistan\") m.add_layers_control() m Out[10]: <pre>Map(bottom=654.0, center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', \u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/vector/#add-vector-and-geojson-function-to-visualize-vector-datasets","title":"Add vector and geojson function to visualize vector datasets\u00b6","text":""}]}